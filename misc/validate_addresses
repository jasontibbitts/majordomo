#!/usr/local/bin/perl-latest -w
# An address syntax checker with semi-useful diagnostics.
#           Copyright 1997 Jason Tibbitts
# This code is made available under the Artistic License.

# Version 1.09

use strict;

my (@x, @y, @z, $a, $b, $c, $i);

#Good
$x[0]  = q|Jason L Tibbits <tibbs@uh.edu>|;
$x[1]  = q|tibbs@uh.edu (Homey (  j (\(\() t ) Tibbs)|;
$x[2]  = q|"tibbs@home"@hpc.uh.edu (JLT )|;
$x[3]  = q| Muhammed.(I am  the greatest) Ali @(the)Vegas.nv.us  |;
$x[4]  = q|tibbs@[129.7.3.5]|;
$x[5]  = q|blah!relay2%relay1|;  # Only if $allow_bang_paths is true
$x[6]  = q|A_Foriegner%across.the.pond@relay1.uu.net|;
#Bad    
$y[0]  = q|tibbs@uh.edu Jason Tibbitts|;  # Full name illegally included
$y[1]  = q|@uh.edu|;                      # Can't start with @
$y[2]  = q|J <tibbs>|;                    # Not FQDN
$y[3]  = q|tibbs@sina (J T)|;             # Not FQDN
$y[4]  = q|<tibbs Da Man|;                # Unbalanced
$y[5]  = q|Jason <tibbs>>|;               # Unbalanced
$y[6]  = q|tibbs, nobody|;                # Multiple addresses not allowed
$y[7]  = q|tibbs@.hpc|;                   # Illegal @.
$y[8]  = q|<a@b>@c|;                      # @ illegal in phrase
$y[9]  = q|<a@>|;                         # No hostname
$y[10] = q|<a@b>.abc|;                    # >. illegal
$y[11] = q|<a@b> blah <d@e>|;             # Two routes illegal
$y[12] = q|<tibbs<tib@a>@hpc.uh.edu>|;    # Nested routes illegal
$y[13] = q|[<tibbs@hpc.uh.edu>]|;         # Enclosed in []
$y[14] = q|tibbs@hpc,uh.edu|;             # Comma illegal
$y[15] = q|<a@b.cd> Me [blurfl] U|;       # Domain literals illegal in comment
$y[16] = q|tibbs@sina.hpc|;               # hpc not legal TLD
$y[17] = q|A B @ C <a@b.c>|;              # @ not legal in comment
$y[18] = q|blah . tibbs@|;                # Unquoted . not legal in comment
$y[19] = q|tibbs@hpc.uh.edu.|;            # Address ends with a dot
$y[20] = q|sina.hpc.uh.edu|;              # No local-part@
$y[21] = q|tibbs@129.7.3.5|;              # Forgot to enclose IP in []
$y[22] = q|Blah <a@b.fi> More Blah|;      # Comments after route
$y[23] = q|a~.`/bin/cp\${IFS}/bin/bash\${IFS}/tmp/lord&&/bin/chmod\${IFS}4777\${IFS}/tmp/lord`.q~a/ad=cucu/c=bl\u\\\@kappa.ro|;
$y[24] = q|smith@computer.net@computer2.edu|;

#Incorrectly handled


%::top_level_domains =
  (
   'com'   => 1,
   'edu'   => 1,
   'net'   => 1,
   'gov'   => 1,
   'mil'   => 1,
   'org'   => 1,
   'int'   => 1,
   'firm'  => 1,
   'store' => 1,
   'web'   => 1,
   'arts'  => 1,
   'rec'   => 1,
   'info'  => 1,
   'nom'   => 1,
   'bitnet' => 1,
   'uucp'  => 1,
   'arpa'  => 1,
   'ad' => 1,
   'ae' => 1,
   'af' => 1,
   'ag' => 1,
   'ai' => 1,
   'al' => 1,
   'am' => 1,
   'an' => 1,
   'ao' => 1,
   'aq' => 1,
   'ar' => 1,
   'as' => 1,
   'at' => 1, 
   'au' => 1,
   'aw' => 1,
   'az' => 1,
   'ba' => 1,
   'bb' => 1,
   'bd' => 1,
   'be' => 1,
   'bf' => 1,
   'bg' => 1,
   'bh' => 1,
   'bi' => 1,
   'bj' => 1,
   'bm' => 1,
   'bn' => 1,
   'bo' => 1,
   'br' => 1,
   'bs' => 1,
   'bt' => 1,
   'bv' => 1,
   'bw' => 1,
   'by' => 1,
   'bz' => 1,
   'ca' => 1,
   'cc' => 1,
   'cf' => 1,
   'cg' => 1,
   'ch' => 1,
   'ci' => 1,
   'ck' => 1,
   'cl' => 1,
   'cm' => 1,
   'cn' => 1,
   'co' => 1,
   'cr' => 1,
   'cu' => 1,
   'cv' => 1,
   'cx' => 1,
   'cy' => 1,
   'cz' => 1,
   'de' => 1,
   'dj' => 1,
   'dk' => 1,
   'dm' => 1,
   'do' => 1,
   'dz' => 1,
   'ec' => 1,
   'ee' => 1,
   'eg' => 1,
   'eh' => 1,
   'er' => 1,
   'es' => 1,
   'et' => 1,
   'fi' => 1,
   'fj' => 1,
   'fk' => 1,
   'fm' => 1,
   'fo' => 1,
   'fr' => 1,
   'fx' => 1,
   'ga' => 1,
   'gb' => 1,
   'gd' => 1,
   'ge' => 1,
   'gf' => 1,
   'gh' => 1,
   'gi' => 1,
   'gl' => 1,
   'gm' => 1,
   'gn' => 1,
   'gp' => 1,
   'gq' => 1,
   'gr' => 1,
   'gs' => 1,
   'gt' => 1,
   'gu' => 1,
   'gw' => 1,
   'gy' => 1,
   'hk' => 1,
   'hm' => 1,
   'hn' => 1,
   'hr' => 1,
   'ht' => 1,
   'hu' => 1,
   'id' => 1,
   'ie' => 1,
   'il' => 1,
   'in' => 1,
   'io' => 1,
   'iq' => 1,
   'ir' => 1,
   'is' => 1,
   'it' => 1,
   'jm' => 1,
   'jo' => 1,
   'jp' => 1,
   'ke' => 1,
   'kg' => 1,
   'kh' => 1,
   'ki' => 1,
   'km' => 1,
   'kn' => 1,
   'kp' => 1,
   'kr' => 1,
   'kw' => 1,
   'ky' => 1,
   'kz' => 1,
   'la' => 1,
   'lb' => 1,
   'lc' => 1,
   'li' => 1,
   'lk' => 1,
   'lr' => 1,
   'ls' => 1,
   'lt' => 1,
   'lu' => 1,
   'lv' => 1,
   'ly' => 1,
   'ma' => 1,
   'mc' => 1,
   'md' => 1,
   'mg' => 1,
   'mh' => 1,
   'mk' => 1,
   'ml' => 1,
   'mm' => 1,
   'mn' => 1,
   'mo' => 1,
   'mp' => 1,
   'mq' => 1,
   'mr' => 1,
   'ms' => 1,
   'mt' => 1,
   'mu' => 1,
   'mv' => 1,
   'mw' => 1,
   'mx' => 1,
   'my' => 1,
   'mz' => 1,
   'na' => 1,
   'nc' => 1,
   'ne' => 1,
   'nf' => 1,
   'ng' => 1,
   'ni' => 1,
   'nl' => 1,
   'no' => 1,
   'np' => 1,
   'nr' => 1,
   'nu' => 1,
   'nz' => 1,
   'om' => 1,
   'pa' => 1,
   'pe' => 1,
   'pf' => 1,
   'pg' => 1,
   'ph' => 1,
   'pk' => 1,
   'pl' => 1,
   'pm' => 1,
   'pn' => 1,
   'pr' => 1,
   'pt' => 1,
   'pw' => 1,
   'py' => 1,
   'qa' => 1,
   're' => 1,
   'ro' => 1,
   'ru' => 1,
   'rw' => 1,
   'sa' => 1,
   'sb' => 1,
   'sc' => 1,
   'sd' => 1,
   'se' => 1,
   'sg' => 1,
   'sh' => 1,
   'si' => 1,
   'sj' => 1,
   'sk' => 1,
   'sl' => 1,
   'sm' => 1,
   'sn' => 1,
   'so' => 1,
   'sr' => 1,
   'st' => 1,
   'su' => 1,
   'sv' => 1,
   'sy' => 1,
   'sz' => 1,
   'tc' => 1,
   'td' => 1,
   'tf' => 1,
   'tg' => 1,
   'th' => 1,
   'tj' => 1,
   'tk' => 1,
   'tm' => 1,
   'tn' => 1,
   'to' => 1,
   'tp' => 1,
   'tr' => 1,
   'tt' => 1,
   'tv' => 1,
   'tw' => 1,
   'tz' => 1,
   'ua' => 1,
   'ug' => 1,
   'uk' => 1,
   'um' => 1,
   'us' => 1,
   'uy' => 1,
   'uz' => 1,
   'va' => 1,
   'vc' => 1,
   've' => 1,
   'vg' => 1,
   'vi' => 1,
   'vn' => 1,
   'vu' => 1,
   'wf' => 1,
   'ws' => 1,
   'ye' => 1,
   'yt' => 1,
   'yu' => 1,
   'za' => 1,
   'zm' => 1,
   'zr' => 1,
   'zw' => 1,
);

$::require_fqdn        = 1;
$::strict_domain_check = 1;
$::allow_ending_dot    = 0;
$::allow_at_in_phrase  = 0;
$::allow_bang_paths    = 1;
$::allow_comments_after_route = 0;

if ($ARGV[0]) {
  open FILE, $ARGV[0];
  while (<FILE>) {
    chomp;
    print "Address: $_\n";
    
    ($a, $b, $c) = validate($_);
    
    if ($a) {
      print "Success: $b\n";
      print "Comment: $c\n" if $c;;
    }
    else {
      print "Error:\n$b";
    }
    print "\n";
  }
}
else {
  for $i (@x, @y, @z) {
    print "Address: $i\n";
    
    ($a, $b, $c) = validate($i);
    
    if ($a) {
      print "Success: $b\n";
      print "Comment: $c\n" if $c;
    }
    else {
      print "Error:\n$b";
    }
    print "\n";
  }
}

sub validate {
  local($_) = shift;
  my (@comment, @phrase, @route, @words, $angle,
      $bang_path, $comment, $domain_literal, $i,
      $left_of_route, $nest, $on_rhs, $subdomain, $word);

  my $specials = q|()<>@,;:\".[]|;
    
  # Trim trailing whitespace; it hoses the algorithm
  s/\s+$//;
  
  if ($_ eq "") {
    return (0, "Nothing at all in that address.\n");
  }

  # We split the address into "words" of either atoms, quoted strings or
  # parenthesized comments.  In the process we have an implicit check for
  # balance.
  while ($_ ne "") {
    $word = "";
    s/^\s+//;  # Trim leading whitespace
    
    # Handle (ugh) nested parenthesized comments.  Man, RFC822 sucks.
    # Nested comments???  We do this first because otherwise the
    # parentheses get parsed separately as specials.  (Pulling out the
    # comments whole makes things easier.)
    if (/^\(/) {
      $comment = "";
      $nest = 0;
      while (s/^(\(([^\\\(\)]|\\.)*)//) {
	$comment .= $1;
	$nest++;
	while ($nest && s/^(([^\\\(\)]|\\.)*\)\s*)//) {
	  $nest--;
	  $comment .= $1;
	}
      }
      
      # If we see no more closing parentheses, we're hosed
      return (0, "Unmatched parenthesis in $comment $_\n") if $nest;
      
      # Trim parentheses and trailing space from the comment

      $comment =~ s/^\(//;
      $comment =~ s/\)\s*$//;
      push @comment, $comment;
      push @phrase,  $comment;
      next;
    }
    
    # Quoted strings are words
    if (s/^(\"(([^\"\\]|\\.)*)\")//) {
      push @words,  $1;
      push @phrase, $2 if !$angle;
      push @route,  $1 if $angle;
      next;
    }

    # Domain literals are words, but are only legal on the right hand side of a mailbox.
    if (s/^(\[([^\[\\]|\\.)*\])//) {
      push @words,  $1;
      push @phrase, $1 if $angle;
      push @route,  $1 if $angle;

      unless ($on_rhs) {
	return (0, "Domain literals (words in square brackets) are only permitted on
the right hand side of an address: $1 $_
Did you mistakenly enclose the entire address in square brackets?
");
      }
      unless ($words[-2] && $words[-2] =~ /^[.@]/) {
	return (0, "Domain literals (words in square brackets) are only permitted after
a '.' or a '\@': $words[-2] _$1_$_\n");
      }
      next;
    }

    # Words made up of legal characters
    if (s/^(([^\s\Q$specials\E])+)//) {
      push @words,  $1;
      push @phrase, $1 if !$angle;
      push @route,  $1 if $angle;
      next;
    }

    # Single specials
    if (s/^([\Q$specials\E])//) {
      push @words, $1;
      push @route, $1 if $angle;

      # Deal with certain special specials

      # We disallow multiple addresses in From, Reply-To, or a sub/unsub
      # operation.
      if ($1 eq ',') {
	return (0, "Multiple addresses not allowed at $words[-2] _$1_ $_
Did you mistype a period as a comma?\n");
      }
      
      # An '@' special puts us on the right hand side of an address
      if ($1 eq '@') {
	$on_rhs = 1;
      }

      # The specials are only allowed between two atoms (comments ignored),
      # but we only have the one to the right to look at.  So we make sure
      # that this special doesn't fall next to another one.
      # Deal with angle brackets (they must nest) and we can only have one
      # bracketed set in an address
      elsif ($1 eq '<') {
	
	$angle++;
	if ($angle > 1) {
	  return (0, "Angle brackets cannot nest at: $words[-2] _$1_ $_\n");
	}

	# Make sure we haven't already seen a route address
	if (@route) {
	  return (0, "Only one bracketed address permitted at: @words[0..$#words-1] _$1_ $_\n");
	}

      }
      elsif ($1 eq '>') {
	$angle--;
	pop @route;
	if ($angle < 0) {
	  return (0, sprintf("Too many closing angles at %s_%s_%s\n",
			    $words[-2]||"", $1, $_));
	}
	next;
      }

      # The following can be if instead of elsif, but we choose to postpone
      # some tests until later to give better messages.
      elsif ($words[-2] && $words[-2] =~ /^[\Q$specials\E]$/) {
	return (0, sprintf("Illegal combination of characters at: %s _%s %s_ %s\n",
			  $words[-3]||"", $words[-2], $words[-1], $_));
      }
      next;
    }

    return (0, "Unrecognized address component in $_\n");
  }
  if ($angle) {
    return (0, "Unmatched open angle bracket in address.\n");
  }

  # So we have the address broken into pieces and have done a bunch of
  # syntax checks.  Now we decide if we have a route address or a simple
  # mailbox, check syntax accordingly, and build the address.

  if (@route) {
    # A route address was found during tokenizing.  We know that the @words
    # list has only one '<>' bracketed section, so we scan everything else
    # for specials and if none are found then the address is legal.
    $angle = 0;
    for $i (0..$#words) {

      # Quoted strings are OK, I think.
      next if $words[$i] =~ /^\"/;

      if ($words[$i] =~ /^\</) {
	$angle++;
	next;
      }
      if ($words[$i] =~ /^\>/) {
	$angle--;
	$left_of_route = 1;
	next;
      }

      # If in a bracketed section, specials are OK.
      next if $angle;
      
      # If we're left of the route address, nothing is allowed to appear.
      # This is common, however, and is overrideable.
      if (!$::allow_comments_after_route && $left_of_route) {
	return (0, "Nothing is allowed to the left of an address in angle brackets.\n");
      }

      # We might be lenient and allow '@' in the phrase
      if ($::allow_at_in_phrase && $words[$i] =~ /^\@/) {
	next;
      }

      # Other specials are illegal 
      if ($words[$i] =~ /^[\Q$specials\E]/) {
	return (0, sprintf("Illegal character in comment portion of address at: %s _%s_ %s\n",
			   $words[$i-1] || "", $words[$i], $words[$i+1] || ""));
      }
    }
    # We toss the other tokens, since we don't need them anymore.
    @words   = @route;
    @comment = @phrase;
  }
  # We have an addr-spec.  The address is then everything that isn't a
  # comment.  XXX We should make special allowances for the weird
  # @domain@domain@domain:addr@domain syntax.

  unless (@words) {
    return (0, "Nothing but comments in that address.\n");
  }

  # In an addr-spec, every atom must be separated by either a '.' (dots are
  # OK on the LHS) or a '@', there must be only a single '@', the address
  # must begin and end with an atom.  (We can be lenient and allow it to
  # end with a '.', too.)
  if ($words[0] =~ /^[.@]/) {
    return (0, "The address cannot begin with either '.' or '\@'.\n");
  }
  
  $on_rhs = 0;

  # We can bail out early if we have just a bang path
  if ($#words == 0 &&
      $::allow_bang_paths &&
      $words[0] =~ /[a-z]+\![a-z]+/i)
    {
      return (1, $words[0], join(" ", @comment)||"");
    }
  
  for $i (1..$#words) {
    if ($words[$i] !~ /^[.@]/ && $words[$i-1] && $words[$i-1] !~ /^[.@]/) {
      return (0, "Individual words are not allowed without an intervening '.' or '\@'
at: $words[$i-1] $words[$i]
Did you supply just your full name?  Did you include your full name
along with your address without surrounding your name by parentheses?
");
    }

    if ($words[$i] eq '@') {
      $on_rhs = 1;
    }

    if ($words[$i] !~ /^[.@]/ && $on_rhs) {
      $subdomain++;
    }

    if ($on_rhs && $words[$i] =~ /^\[/) {
      $domain_literal = 1;
    }
  }
  
  if ($::require_fqdn && !$on_rhs) {
    if ($::top_level_domains{lc($words[-1])}) {
      return (0, "It looks like you have supplied just a domain name
without the rest of the address.\n");
    }
    else {
      return (0, "You did not include a hostname as part of the address.\n");
    }
  }

  if ($words[-1] eq '@') {
    return (0, "The address cannot end with an '\@'.  You must supply a hostname.\n");
  }

  if (!$::allow_ending_dot && $words[-1] eq '.') {
    return (0, "The address cannot end with a '.'.\n");
  }

  # Now check the validity of the domain part of the address.  If we've
  # seen a domain-literal, all bets are off.
  if ($::require_fqdn && $subdomain < 2 && !$domain_literal) {
    return (0, "You did not include a complete hostname.\n");
  }
  if (($::strict_domain_check &&
       $words[-1] !~ /^\[/ &&
       !$::top_level_domains{lc($words[-1])}) ||
      $words[-1] !~ /[\w-]{2,5}/)
    {
      if ($words[-1] !~ /\D/ &&
	  $words[-3] && $words[-3] !~ /\D/ &&
	  $words[-5] && $words[-5] !~ /\D/ &&
	  $words[-7] && $words[-7] !~ /\D/)
	{
	  return (0, "It looks like you are trying to supply your IP address
instead of a hostname.  To do, you must enclose it in
square brackets like so: [" . join("",@words[-7..-1]) . "]\n");
	}
      
      return (0, "The domain you provided, $words[-1], does not seem
to be a legal top-level domain.\n");
    }

  my $addr = join("", @words);
  my $comm = join(" ", @comment) || "";

  (1, $addr, $comm);
}
