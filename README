-*- Text -*-

If upgrading from alpha 1 or earlier, please read README.UPGRADE.

This is an alpha release of Majordomo 2.0.  It can easily be used to run a
number of lists.  Many pieces of functionality that are present in 1.94.x
(most prominent being digests) are missing from this release and there is
much work to be done.  There are definltely many bugs although all critical
bugs encountered during testing have been fixed.

Note: this requires Perl 5.004_01 to run.  This is due to bugs in
5.004, and the fact that lesser versions are both lacking in features
and security.  Most of the testing is done using 0perl 5.004_04.

The following modules are required.  These may have prerequisites which
have not been listed; please inform majordomo-workers (see below) of these.

the libnet package, including Net::Domain.
the MIME-tools package (version 4.116), including MIME::Parser and
  MIME::Entity, but see below.
the MailTools package (version 1.11), including Mail::Header and
  Mail::Internet.
Data::Dumper version 2.07
MD5 version 1.7
MIME::Base64 version 2.0
Date::Manip version 5.1
Date::Format

The Time::HiRes module is recommended if you want to generate accurate
timings, but is not required.

All of these modules are available from CPAN, the Comprehensive Perl
Archive Network.  To find a CPAN site nearest you, look at
<URL:http://www.perl.org/> or <URL:http://www.perl.com/>.  You may also use
the CPAN module which comes with Perl; check the Perl documentation for
more info.

The MIME-Tools package is missing a patch to fix certain warnings; this
patch is included as MIME-tools.patch.  It is not required, but occasional
warnings will appear from Entity.pm if it is not applied.  Hopefully a new
version of MIME-tools will appear soon with this problem fixed.

Majordomo 2 includes its own setuid wrapper generation, so setuid scripts
are not required.  Things are slightly simpler without them, but all
functionality is preserved.

Note: if you have any input on this software, even if you have not
tested it, please let majordomo-workers@greatcircle.com know.  All
feedback is appreciated.

Reporting bugs:

Please report bugs to mj-bugs@hpc.uh.edu, or use the online reporting form
at <URL:http://www.hpc.uh.edu/cgi-bin/majordomo/wreq/req>.  These are
processed by an automated tracking facility; you will be periodically
informed of your bug report's status.

Similarities with 1.94.x:

A major design goal of Majordomo 2 is to provide something that looks
exactly like Majordomo 1.94.4 to the users.  All existing instructions for
end users of Majordomo-managed lists should still be applicable, excepting
places where changes in previous behavior were required to fix bugs or plug
security holes.  (Note that the changes in the confirmation process both
fix bugs and improve security and also make things much easier on the
users.)

The situation is much the same for list owners, but the approval and config
procedures have changed.  There is some backwards compatibility here,
though, and more may be forthcoming.  There are, of course, many more
variables that can be set.

Differences from 1.94.x:

Everything.  No code has survived.  It was flea-bitten, full of warnings
and didn't have a hope of running under -w, use strict, or taint checks.  I
found it simpler to write it all anew than to try to fix the old code and
make it do what I wanted.  I tried for a long time; half-rewriting it at
least twice.

Majordomo now communicates with a delivery agent via standard
protocols; there is no reliance on being able to call something that
looks like sendmail.  It can also speak the protocol used by
qmail-queue to inject mail directly.

Majordomo keeps a database of subscribers, and so can keep lots of extra
state information.  Because of this, digests can be incorporated into the
main list, along with vacation mode and other goodies.

Majordomo has a completely different file layout, with one directory per
virtual domain containing one directory per list.

The interfaces are completely separate from the core.  There are interfaces
for email and shell access, with plans for more.

Piles of other stuff.  Too much to list.  Read all of the pods and the TODO
list, and the hundred or so pages of notes I have on real paper which you
probably couldn't read even if you could get to them.


Installation:

Much blood has been shed to make installation as painless as possible.
It's still painful because it's not finished.  Try to imagine how easy it
will be when it's finished.

To install:
  unpack (you did that if you're reading this).
  type "perl Makefile.PL".
  follow the onscreen directions (to the letter!)

Make certain that the Majordomo user can actually see the distribution
files during installation; the installation may fail if the files are
unreadable.  And or course root should be able to see the files.  (This is
not the case with some NFS setups.)

When it's done, that will be all.  But it's not done...  It's getting
better, though.



Interacting with Majordomo:

After installing the aliases as given by the installation process and
possibly rebuildig the alias database, Majordomo should respond to mailed
commands at the given address.  The command processor works in much the
same way as it does in Majordomo 1, but with many additions.  In
particular, the commahd works and also takes topics to give help on; try
'help topics' and 'help parser'.

New with Majordomo2 is the shell interface; it can be used to interact with
the server via the command line.  This is in general much easier to deal
with for local users.  The installation process will have installed a
manual page along with the executables and libraries; accessing it is
system-dependent but may require setting the MANPATH variable to add the
new directory.  Just about everything that can be done from te email
interface can be done from the shell interface, along with a few other
things like interactive editing of configuration variables.


Creating and converting lists:

You can make your own lists just by calling the creatlist command, like
this:

mj_shell -p password createlist list-name owner@address

This will give you the necessary aliases to add to the appropriate file, if
you're running Sendmail.  You can pull in a set of addresses from a
Majordomo 1.9x list like this:

mj_shell -p password -f old-list-file subscribe=quiet,noinform list-name

(This subscribes all addresses from a file, without welcoming them and
without sending an informational notification to the list owner).

If you copy the old configuration file into the directory for the new list,
it will be automatically created.


List configuration:

Lists are configured using the configshow and configset commands.  The old
config interface is not yet supported.  Try viewing the 'admin
configuration' help topic.  To see the whole config file, you can send
'configshow=comments listname ALL'.


The Filespace:

Each list has a directory where retrievable files are stored; this is
called a filespace.  Because normal filesystems do not track enough
information about file types, Majordomo2 maintains a database containing
information about these files such as their description and MIME type.  The
list owner can upload files to the filespace and users can retrieve files
from the public portion of the filespace.

When retrieving a file from the filespace, Majordomo2 consults a search
list made from the 'file_search' config variable and a global default.
Other list's files can be referenced as long as they share their files.
Since Majordomo2 goes through the filespace to send out nearly all of its
messages, this provides both an overrideable defaults mechanism and a means
for internationalization.

Files are uploaded using the 'put' command; 'put=dir' will make
directories.  There is currently no way to delete a file.  The 'newinfo',
'newintro' and 'newfaq' commands are shortcuts for 'put' with specific
arguments.

Files are retrieved with the 'get' command; 'get=immediate' will return the
file inline instead of mailing it as a separate message.  The 'intro',
'info' and 'faq' commands are shortcuts for 'get' with specific arguments.

A (partial) list of the response files that Majordomo2 uses are given, with
supported variable expansions, in the FILES document.


Archives:

Archives start accumulating as soon as the archive_dir variable is set and
the directory exists.  There is no need to create additional aliases.
Archives are free of fronters, footers, most header modifications and
subject prefixing.

A future release will have archiving on by default, with archives
accumulating in files/public/archive.  This can actually be a symlink
without problems.  (Archives will be needed in order for digests to work.
There will be provisions for old archives to automatically be removed, in
case long-term archiving is not desired.)


Access Control:

All operations which need to restrict access go through a central mechanism
for doing so.  The list owner can choose to use the old Majordomo 1
interface which works via the *_access variables, restrict_post,
subscribe_policy and the like.  This works as expected (though the
mechanism by which restrict_post lists are set up has changed).

The owner can also choose to make use of an extremely flexible system which
is semi-documented in the 'ACCESS_RULES' file.  This, when coupled with
some of the taboo_* extensions (like severity and classes) and the metrics
that resend collects allows almost arbitrarily complex access control.

Instead of Majordomo 1's limitation of confirming only subscribes, almost
any operation can be stalled and completed after a conformation token is
returned by either the user or the owner (or both).  The owner can also
choose to deny outright a request.

Information about a token can be retrieved using the 'tokeninfo' command.


Sessions:

Majordomo2 stores information about every email or command line processed
in files called sessions.  These are files containing all pertinent
information about the session (email headers, CGI environment, selected
environment variables, etc. as appropriate) as well as a log of all
commands executed during that session.  When a token is rejected,
information about the session that generated it is automatically mailed to
the list and site owners (if they elect to receive such information).

 - J<
