#!/usr/local/bin/perl-latest -wT
BEGIN {
  $::LIBDIR = 'unset';
  $::LISTDIR= 'unset';
  $::TMPDIR = 'unset';
  $::LOCKDIR= "blah";
  $::UID    = "baduid";
  $::GID    = "badgid";
  $::UMASK  = "007";
  $SIG{__WARN__} = sub {print STDERR "--== $_[0]"};

  # Redirect standard error output.
  if (! -t STDERR) {
    open (STDERR, ">>$::TMPDIR/mj_wwwusr.debug");
  }

  # Croak if install was botched
  die("Not running as UID $::UID") unless $> == $::UID;
  die("Not running as GID $::GID") unless $) == $::GID;
  $< = $>; $( = $);
}

=head1 NAME

mj_wwwusr - demonstration of majordomo user interface .

=head1 SYNOPSIS

Extend this file to create specialized CGI scripts.

=head1 DESCRIPTION

When utilizing majordomo with a CGI script, there are
several basic steps that must be taken, including initializing
majordomo variables,  creating a log (STDERR by default), 
initializing a CGI object, and starting a majordomo session
with connect().

This script performs these basic steps, easing the 
creation of new CGI scripts.  Adapt it to suit your needs.

Note that it may be necessary to install a setuid wrapper
for any script based upon this example.

=cut
use lib "$::LIBDIR";
use strict;
use CGI;
use Majordomo;
use Mj::Addr;
use Mj::CommandProps qw(:function);
use Mj::Format;
use Mj::Log;
use Mj::Parser;

my (%commands, @domains, @lists, $addr, $cgi, $cgidata, $cgiurl, $debug,
    $domain, $extra, $falseuser, $func, $i, $list, $loc, $mj, $mess, $mode, 
    $ofunc, $ok, $opass, $part, $passw, $pathinfo, $raw, $request, 
    $result, $sess, $str, $sublist, $subs, $tmp, $truelist, $user);

#----- Which commands are supported  -----#
# First  value:  Is a password required? 
#                (1 = always, 0 = never, -1 = if an access check fails)
# Second value:  Is a valid address required?
# Third  value:  Is a list required?
# Fourth value:  Page to display after the result.
%commands = (   
                'alias'         => [1, 1, 0, 'show'],
                'archive'       => [-1, 1, 1, 'archive'],
                'changeaddr'    => [1, 1, 0, 'show'],
                'faq'           => [-1, 0, 1, 'list'],
                'help'          => [-1, 0, 0, 'help'],
                'info'          => [-1, 0, 1, 'list'],
                'intro'         => [-1, 0, 1, 'list'],
                'lists'         => [0, 0, 0, 'lists'],
                'password'      => [0, 1, 0, 'login'],
                'register'      => [0, 1, 0, 'login'],
                'set'           => [1, 1, 1, 'show'],
                'show'          => [1, 1, 0, 'show'],
                'subscribe'     => [0, 1, 1, 'list'],
                'unalias'       => [1, 1, 0, 'show'],
                'unregister'    => [1, 1, 0, 'login'],
                'unsubscribe'   => [1, 1, 1, 'show'],
                'welcome'       => [0, 0, 0, 'welcome'],
            );
             
#----- Initialize the Log -----#
&initialize_log;

#----- Initialize the CGI object -----#
$cgi = new CGI;

$pathinfo = '';
$domain = $cgi->param('domain') || '';

if (exists $ENV{'PATH_INFO'}) {
  $pathinfo = $ENV{'PATH_INFO'};
  while ($pathinfo =~ s#/domain=([^/]+)##) {
    $tmp = $1;
    next if ($tmp =~ /[^a-zA-Z0-9.-]/);
    # Use the first domain found.
    $domain = $tmp unless (length $domain);
  }

  $pathinfo =~ s#^/+##;
  $pathinfo =~ s#/+$##;
  if ($pathinfo =~ m#(.+\@[^/]+)#) {
    # The path appears to contain the subscriber's address.
    $pathinfo = $1;
  }
  else {
    $pathinfo = '';
  }
}

# Clean up the URL by which this program was invoked.
$cgiurl = $cgi->script_name;
if ($domain) {
  $cgiurl .= "/domain=$domain";
}
if ($pathinfo) {
  $cgiurl .= "/$pathinfo";
}
$cgiurl = Mj::Format::uescape($cgiurl);

unless ($domain) {
  @domains = Majordomo::domains($::LISTDIR);
  ($domain) = grep { lc $_ eq lc $ENV{'HTTP_HOST'} } @domains;
  $domain = $domains[0] unless $domain;
}

# Untaint the domain name.
if ($domain =~ /([a-zA-Z0-9\.\-]+)/) {
  $domain = $1;
}
else {
  &surrender($cgi, qq("$domain" is an invalid domain.), '');
}

#----- Make the Majordomo object -----#
$mj = new Majordomo $::LISTDIR, $domain;
&surrender($cgi, $mj, '') unless (ref $mj);

#----- Generate the session information. -----#
for my $i ('REMOTE_ADDR','REMOTE_PORT', 'PATH_INFO') {
  $sess .= "X-$i: $ENV{$i}\n" if defined $ENV{$i};
}
$sess .= "Date: " . scalar(localtime(time)) . "\n";

#----- Determine the address of the user. -----#
$falseuser = "x$ENV{'REMOTE_ADDR'}\@example.com";
# Convert colons to underscores in IPv6 addresses
$falseuser =~ s/:/_/g; 
$user      = $cgi->param('user') || $pathinfo || $falseuser;

#----- Determine the password -----#
$opass = $cgi->param('passw');
if (defined $opass and length $opass) {
  if ($opass =~ /(\S+)/) {
    $passw = $1;
  }
  else {
    $passw = '';
  }
}
else {
  $opass = $passw = '';
}

#----- Connect to the server -----#
($ok, $mess) = $mj->connect('wwwusr', $sess, $user, $passw);

unless ($ok) {
  &surrender($cgi, $mess, $domain);
}

#----- Create a temporary password -----#
if (length $opass) {
  $passw = $mj->gen_latchkey($passw) 
    unless ($mj->t_recognize($passw));
}

$ofunc = $cgi->param('func') || 'welcome';
$mode  = join ('-', $cgi->param('mode')) || '';
if ($mode  =~ /^([a-zA-Z=-]+)/) { 
  $mode = lc $1;
}

$cgidata = Mj::Format::cgidata($mj, { 'password' => $passw,
                                      'user'     => ($user eq $falseuser) ? 
                                       '' : $user });
$extra = $cgi->param('extra');
$extra = '' unless (defined $extra);

$subs = { $mj->standard_subs('GLOBAL'),
          'CGIDATA'  => $cgidata,
          'CGIURL'   => $cgiurl,
          'CMDPASS'  => Mj::Format::escape($passw),
          'COMMAND'  => Mj::Format::escape($ofunc),
          'EXTRA'    => Mj::Format::escape($extra),
          'USER'     => ($user eq $falseuser) ? '':
                        Mj::Format::escape($user),
        };

#----- Determine what service was requested -----#
# Extract "mode" from command name
if ($ofunc =~ /([^\s=-]+)[=-](.*)/) {
  $func = $1;
  if (length $mode) {
    $mode = lc $2 . "-$mode";
  }
  else {
    $mode = lc $2;
  }
}
else { 
  $ofunc =~ /(.*)/; $ofunc = $1;
  $func = $ofunc;
}

if ($func eq 'logout') {
  $mj->del_latchkey($passw);
  $subs->{'CMDPASS'} = '';
  $subs->{'COMMAND'} = 'welcome';
  $subs->{'CGIDATA'} =
    Mj::Format::cgidata($mj, { 'password' => '',
                               'user'     => $user });

  $tmp = $mj->format_get_string('wwwusr', 'logout', 'GLOBAL');
  $str = $mj->substitute_vars_format($tmp, $subs);
  &usage($mj, $cgi, $subs, $str, '');
}
elsif ($func eq 'login') {
  $subs->{'COMMAND'} = 'welcome-login';
  &login($mj, $subs, '', 1);
}

$raw = 0;
if ($func eq 'archive' and $mode =~ /get/ and $mode =~ /part/) {
  $raw = 1;
}

# Make sure the command is valid
unless (exists $commands{$func}) {
  $mess = $mj->format_error('invalid_command', 'GLOBAL', 'COMMAND' => $func);
  &usage($mj, $cgi, $subs, $mess, '');
}

#----- List check -----#
@lists = $cgi->param('list');
if ($commands{$func}->[2] and ! scalar @lists) {
  $mess = $mj->format_error('no_list', 'GLOBAL', 'COMMAND' => $func), 
  &usage($mj, $cgi, $subs, $mess, 'choose_list');
}
$lists[0] ||= 'GLOBAL';
if ($lists[0] ne 'GLOBAL') {
  $subs = { %$subs,
            $mj->standard_subs($lists[0]),
          };
}

#----- Validate the list names -----#
for ($i = 0 ; $i < scalar @lists ; $i++) {
  $lists[$i] =~ s/\s+//g;
  $str = $lists[$i];
  $str =~ s/:[^:]*$//;

  unless (Majordomo::legal_list_name($str)) {
    $mess = $mj->format_error('invalid_list', 'GLOBAL', 'LIST' => $str);
    &usage($mj, $cgi, $subs, $mess, 'choose_list');
  }
}

($truelist, $sublist, $mess) = $mj->valid_list($lists[0], 1, 1);
unless (defined $truelist and length $truelist) {
  unless (defined $mess and length $mess) {
    $mess = $mj->format_error('unknown_list', 'GLOBAL', 'LIST' => $lists[0]);
  }
  &usage($mj, $cgi, $subs, $mess, 'choose_list');
}

$debug = $mj->list_config_get(undef, undef, $truelist, 'MAIN', 'debug') || 0;
$::log->set_level($debug);

#----- Address check -----#
if ($commands{$func}->[1] and (!$user or $user =~ /example\.com$/i)) {
  &usage($mj, $cgi, $subs, $mj->format_error('undefined_address', 'GLOBAL'), 
         'choose_email');
}

$addr = new Mj::Addr($user);

unless (defined $addr) {
  &usage($mj, $cgi, $subs, $mj->format_error('undefined_address', 'GLOBAL'), 
         'choose_email');
}
  
($ok, $mess, $loc) = $addr->valid;
unless ($ok) {
  $mess = $mj->format_error($mess, 'GLOBAL');
  &usage($mj, $cgi, $subs, 
         $mj->format_error('invalid_address', 'GLOBAL', 
                           'ADDRESS' => $user, 'ERROR' => $mess,
                           'LOCATION' => $loc),
         'choose_email');
}

$tmp = $cgi->param('name');
if (defined $tmp and $tmp =~ /\S/) {
  ($ok, $mess, $loc) = $addr->setcomment($tmp);
  unless ($ok) {
    $mess = $mj->format_error($mess, 'GLOBAL');
    &usage($mj, $cgi, $subs,
           $mj->format_error('invalid_comment', 'GLOBAL', 'COMMENT' => $tmp, 
                             'ERROR' => $mess, 'LOCATION' => $loc), 
           'choose_email');
  }
}

#----- Password check -----#
if (! $passw) {
  &login($mj, $subs, $mj->format_error('no_user_password', 'GLOBAL',
                                       'COMMAND' => $func), 1)
    if ($commands{$func}->[0] == 1 or ($func eq 'archive' 
        and $mode =~ /get/ and $mode !~ /part|immediate/));
}
else {
  unless ($mj->validate_passwd($addr, $passw, 'GLOBAL', 'show')) {
    if ($mj->t_recognize($opass)) {
      $subs->{'CMDPASS'} = '';
      &login($mj, $subs, '', 1);
    }
    $subs->{'CMDPASS'} = '';
    &login($mj, $subs, $mj->format_error('invalid_password',
                         'GLOBAL', 'VICTIM' => $user), 1);
  }
}

if ($func eq 'welcome') {
  if ($mode =~ /login/) {
    $tmp = $mj->format_get_string('wwwusr', 'logged_in', 'GLOBAL');
    $subs->{'ERROR'} = $mj->substitute_vars_format($tmp, $subs);
  }
  $tmp = $cgi->param('doc') || '';
  &usage($mj, $cgi, $subs, '', $tmp);
}

#----- Construct the request -----#
$request = {
  'cgidata'   => $cgidata,
  'cgiurl'    => $cgiurl,
  'command'   => $func,
  'list'      => $truelist,
  'mode'      => $mode,
  'password'  => $passw,
  'user'      => $addr,
};
if (function_prop($func, 'iter')) {
  $request->{'command'} .= '_start';
}

#----- For changeaddr to work, the user and victim must be exchanged. -----#
if ($func eq 'changeaddr') {
  $request->{'user'} = $extra;
  $extra = $user;
}
  
no strict 'refs';
#----- Convert the arguments into the appropriate request values -----#
Mj::Parser::parse_args ($request, $extra, '') 
  if (defined $extra and length $extra);

#----- If access fails, prompt for a password -----#
if (! length($passw) and $commands{$func}->[0] == -1) {
  ($ok, $str) = $mj->list_access_check($request, 'nostall' => 1);
  unless ($ok) {
    $subs->{'LIST'} = Mj::Format::escape($lists[0]);
    &login($mj, $subs, $mj->format_error('no_user_password', $lists[0],
                                         'COMMAND' => $func), 1);
  }
}

#----- Print the generic page header -----#
unless ($raw) {
  print $cgi->header(-expires => '+10s');
  $tmp = $mj->format_get_string('wwwusr', 'head', $lists[0]);
  $str = $mj->substitute_vars_format($tmp, $subs);
  print STDOUT "$str\n";
}

for $list (@lists) {
  $request->{'list'} = $list;
  # For the 'set' command, convert the CGI data into the appropriate settings.
  if ($func eq 'set') {
    my ($i, $j, @params, @settings);
    @params = $cgi->param;
    for $j (qw(delivery ackdeny ackpost ackreject ackstall eliminatecc
               hideaddress hideall hidepost prefix replyto selfcopy 
               rewritefrom)) {
      $i = "$list;$j";
      if ($j eq 'delivery') {
        push @settings, $cgi->param($i);
      }
      else {
        if (! $cgi->param($i)) {
          push @settings, "no$j";
        }
        elsif ($cgi->param($i) eq 'on') {
          push @settings, $j;
        }
        # If the setting is disabled, ignore it.
      }
    }
    $request->{'setting'} = join ",", @settings;
  }
  elsif ($func eq 'password') {
    $tmp = $cgi->param('newpasswd');
    if (defined $tmp and $tmp =~ /\S/) {
      $tmp =~ s/\s+//g;
      Mj::Parser::parse_args($request, $tmp, '');
    }
    else {
      unless (length $request->{'mode'}) {
        $request->{'mode'} = 'gen';
      }
    }
    $subs->{'CMDPASS'} = '';
    $subs->{'COMMAND'} = 'show';
  }
  elsif ($func eq 'unalias') {
    $tmp = $cgi->param('alias');
    $tmp =~ s/\s+//g;
    if (defined $tmp and length $tmp) {
      Mj::Parser::parse_args ($request, $tmp, '');
    }
  }

  $result = $mj->dispatch($request); 
  &usage($mj, $cgi, $subs, "Unable to obtain result from Majordomo.") 
    unless $result;

  # Display part of a message when the archive-get-part command is used.
  if ($raw) {
    $part = $request->{'part'};

    if (! $result->[0] or $part eq '0') {
      print $cgi->header(-expires => '+10s');
      $tmp = $mj->format_get_string('wwwusr', 'head', $list);
      $str = $mj->substitute_vars_format($tmp, $subs);
      print STDOUT "$str\n";
      $raw = 0;
    }
    elsif ($part =~ /[hH]$/) {
      print $cgi->header('-type' => 'text/plain', '-expires' => '+10s');
    }
    else {
      print $cgi->header(
        '-type' => $result->[1]->[2]->{$part}->{'type'} || 'text/plain',
        '-charset' => $result->[1]->[2]->{$part}->{'charset'},
        '-expires' => '+10s',
      );
    }
  }

  &{"Mj::Format::$func"}($mj, \*STDOUT, \*STDOUT, 'wwwusr', $request, $result);
}

#----- Display supplementary information -----#
# There are five supplementary screens which this script displays. 
#   list - Information about a single mailing list
#   lists - Information about all public mailing lists
#   login - Prompt for an e-mail address and password
#   show - Personal information about a subscriber
#   welcome - A help file that describes how to use the interface.

if ($commands{$func}->[3] ne $func and $ofunc ne 'set-check') {
  if ($func eq 'changeaddr') {
    # restore original user if changeaddr did not succeed.
    $request->{'user'} = $user if ($result->[0] < 1);
    delete $request->{'victim'};
    delete $request->{'victims'};
  }

  if ($cgi->param('brief') or $raw) {
    # Display nothing.
  }
  elsif ($commands{$func}->[3] eq 'list') {
    $request->{'command'} = 'lists';
    $request->{'mode'} = 'full-long';
    $request->{'list'} = 'GLOBAL';
    for $list (@lists) {
      $request->{'regexp'} = $list;
      $result = $mj->dispatch($request); 
      &usage($mj, $cgi, $subs, "Unable to obtain result from Majordomo.", '') 
        unless $result;
      &Mj::Format::lists($mj, \*STDOUT, \*STDOUT, 'wwwusr', $request, $result);
    }
  }
  elsif ($commands{$func}->[3] eq 'lists') {
    $request->{'command'} = 'lists';
    $request->{'mode'} = '';
    $request->{'list'} = 'GLOBAL';
    $result = $mj->dispatch($request); 
    &usage($mj, $cgi, $subs, "Unable to obtain result from Majordomo.", '') 
      unless $result;
    &Mj::Format::lists($mj, \*STDOUT, \*STDOUT, 'wwwusr', $request, $result);
  }
  elsif ($commands{$func}->[3] eq 'show') {
    $func = $request->{'command'} = 'show';
    delete $request->{'victim'};
    delete $request->{'victims'};
    $request->{'mode'} = '';
    $result = $mj->dispatch($request); 
    &usage($mj, $cgi, $subs, "Unable to obtain result from Majordomo.", '') 
      unless $result;
    &Mj::Format::show($mj, \*STDOUT, \*STDOUT, 'wwwusr', $request, $result);
  }
  elsif ($commands{$func}->[3] eq 'welcome') {
    &usage($mj, $cgi, $subs, '', '');
  }
  elsif ($commands{$func}->[3] eq 'login') {
    &login($mj, $subs, '', 0);
  }
  # Fall through for unexpected cases.
}

#----- Print the Footer -----#
unless ($raw) {
  $tmp = $mj->format_get_string('wwwusr', 'foot', $lists[0]);
  $str = $mj->substitute_vars_format($tmp, $subs);
  print STDOUT "$str\n";
}

#----- Subroutines -----#

sub initialize_log {  
  $ENV{'PATH'} = "/bin:/usr/bin:/usr/ucb";
  umask oct($::UMASK);
  # Change the log level to a higher number (500) for complete debugging
  $::log = new Mj::Log;
  $::log->add
    (
     method      => 'handle',
     id          => 'wwwusr',
     handle      => \*STDERR,
     level       => 20,
     subsystem   => 'mail',
     log_entries => 1,
     log_exits   => 1,
     log_args    => 1,
    );

  $::log->in(20, undef, "info", "Majordomo 2 WWW User Interface - " .
                                 scalar(localtime) .
                                 " from $ENV{'REMOTE_ADDR'}");
  $::log->startup_time();
}

sub login {
  my ($mj, $subs, $message, $printhdr) = @_;
  my ($str, $tmp);

  $subs->{'ERROR'} = Mj::Format::escape($message);
  $::log->message(20, "info", $message) if $message;

  if ($printhdr) {
    print $cgi->header(-expires => '+10s');
    $tmp = $mj->format_get_string('wwwusr', 'head', $subs->{'LIST'});
    $str = $mj->substitute_vars_format($tmp, $subs);
    print STDOUT "$str\n";
  }

  $tmp = $mj->format_get_string('wwwusr', 'login', $subs->{'LIST'});
  $str = $mj->substitute_vars_format($tmp, $subs);
  print STDOUT "$str\n";

  $tmp = $mj->format_get_string('wwwusr', 'foot', $subs->{'LIST'});
  $str = $mj->substitute_vars_format($tmp, $subs);
  print STDOUT "$str\n";
  
  exit 1;
}

sub usage {
  my ($mj, $cgi, $subs, $message, $helpfile) = @_;
  my ($str, $tmp);

  if (defined $message and length $message) {
    $subs->{'ERROR'} = Mj::Format::escape($message);
    $::log->message(20, "info", $message);
  }
  else {
    $subs->{'ERROR'} ||= '';
  }

  print $cgi->header(-expires => '+10s');
  $tmp = $mj->format_get_string('wwwusr', 'head', $subs->{'LIST'});
  $str = $mj->substitute_vars_format($tmp, $subs);
  print STDOUT "$str\n";

  $tmp = '';
  if (defined $helpfile and length $helpfile) {
    $tmp = $mj->format_get_string('wwwusr', "welcome_$helpfile",
                                  $subs->{'LIST'});
  }

  unless (defined $tmp and length $tmp) {
    $tmp = $mj->format_get_string('wwwusr', 'welcome', $subs->{'LIST'});
  }
  $str = $mj->substitute_vars_format($tmp, $subs);
  print STDOUT "$str\n";

  $tmp = $mj->format_get_string('wwwusr', 'foot', $subs->{'LIST'});
  $str = $mj->substitute_vars_format($tmp, $subs);
  print STDOUT "$str\n";
  
  exit 1;
}

sub surrender {
  my ($cgi, $message, $domain) = @_;
  my $url = $cgi->script_name;
  $domain ||= '';

  if ($message) {
    $::log->message(20, "info", $message);
    $message = Mj::Format::escape($message);
  }

  $domain = Mj::Format::escape($domain);

  print $cgi->header(-expires => '+10s');

  print <<EOM;
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
"http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head>
<title>Majordomo 2 Subscriber Interface: Error</title>
</head>
<body>
<h2 align=center>Majordomo Error</h2>

<pre>$message</pre>

<p>
Type a valid Majordomo domain name into the <b>Domain</b> box.  
Press the <b>Sign In</b> button to receive further instructions.
</p>

<form method="POST" action="$url">
  <input type="hidden" name="func" value="login">
  Domain:
  <input name="domain" size="45" value="$domain">
  <input type="submit" value="Sign In">
</form>
</body></html>
EOM

  exit 0;
}


=head1 COPYRIGHT

Copyright (c) 2000, 2002, 2004 Jason Tibbitts for The Majordomo
Development Group.  All rights reserved.

This program is free software; you can redistribute it and/or modify it
under the terms of the license detailed in the LICENSE file of the
Majordomo2 distribution.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the Majordomo2 LICENSE file for more
detailed information.

=cut

#^L
### Local Variables: ***
### cperl-indent-level:2 ***
### End: ***


