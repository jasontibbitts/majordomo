#!/usr/local/bin/perl-latest -wT
BEGIN {
  $::LIBDIR = 'unset';
  $::LISTDIR= 'unset';
  $::DEFDOM = 'unset';
  $::TMPDIR = 'unset';
  $::LOCKDIR= "blah";
  $::UMASK  = "007";
  $SIG{__WARN__} = sub {print STDERR "--== $_[0]"};

  # Redirect standard error output.
  if (! -t STDERR) {
    open (STDERR, ">>$::TMPDIR/mj_wwwusr.debug");
  }
}

=head1 NAME

mj_wwwusr - demonstration of majordomo user interface .

=head1 SYNOPSIS

Extend this file to create specialized CGI scripts.

=head1 DESCRIPTION

When utilizing majordomo with a CGI script, there are
several basic steps that must be taken, including initializing
majordomo variables,  creating a log (STDERR by default), 
initializing a CGI object, and starting a majordomo session
with connect().

This script performs these basic steps, easing the 
creation of new CGI scripts.  Adapt it to suit your needs.

Note that it may be necessary to install a setuid wrapper
for any script based upon this example.

=cut
use lib "$::LIBDIR";
use strict;
use CGI;
use Majordomo;
use Mj::CommandProps qw(:function);
use Mj::Parser;
use Mj::Format;
use Mj::Log;
use Mj::Addr;

my ($cgi, $domain, $mj, $ok, $mess, $serveradmin, $sess, %commands, $isreg);
my ($ofunc, $func, $user, $passw, $pathinfo, $mode, $list, $vict, $extra);
my ($line, $site, $file, $fh, $cgiurl, $cmdform, $serveraddr, $falseuser);
my ($request, $result);

$ENV{'PATH'} = "/bin:/usr/bin:/usr/ucb";

umask oct($::UMASK);

# Change the log level to a higher number (500) for complete debugging
$::log = new Mj::Log;
$::log->add
  (
   method      => 'handle',
   id          => 'mjusr',
   handle      => \*STDERR,
   level       => 50,
   subsystem   => 'mail',
   log_entries => 1,
   log_exits   => 1,
   log_args    => 1,
  );

$::log->in(20, undef, "info", "Majordomo 2 WWW for Subscribers - ".scalar(localtime)." from $ENV{'REMOTE_ADDR'}");
$::log->startup_time();

# Start up the page and parse the URL
$cgi = new CGI;
print $cgi->header;
$domain = $cgi->param('domain') || $::DEFDOM;
$domain =~ /(\S+)/; $domain = $1;

# Make the Majordomo object
$mj = new Majordomo $::LISTDIR, $domain;
&surrender($mj) unless (ref $mj);

# $cgiurl = $mj->{'sitedata'}{'config'}{'cgi_url'} . "mj_wwwusr";
# Use URL with which we were called.
$cgiurl = sprintf "http://%s:%s%s", $ENV{'SERVER_NAME'},
          $ENV{'SERVER_PORT'}, $ENV{'SCRIPT_NAME'}, $ENV{'PATH_INFO'};

$serveradmin = $mj->global_config_get(undef, undef, 'whoami_owner');
$pathinfo = '';

# Generate the session information
for my $i ('REMOTE_ADDR','REMOTE_PORT', 'PATH_INFO') {
  $sess .= "$i = $ENV{$i}\n" if defined $ENV{$i};
}
$sess .= scalar(localtime(time)) . "\n";


if (exists $ENV{'PATH_INFO'}) {
  $pathinfo = $ENV{'PATH_INFO'};
  $pathinfo =~ m#/([^/\s]+)#;
  $pathinfo = $1;
}

$site        = $mj->global_config_get(undef, undef, 'site_name');
$serveraddr  = $mj->global_config_get(undef, undef, 'whoami');
$falseuser   = "x$ENV{'REMOTE_ADDR'}\@example.com";
# Set HTML form variables
$ofunc   = $cgi->param('func') || "lists";
$user    = $cgi->param('user') || $pathinfo || $falseuser;
$user    = new Mj::Addr($user) if $user;
$isreg   = $mj->{'reg'}->lookup($user->canon) if $user;
$passw   = $cgi->param('passw') || '';
$list    = $cgi->param('list') || 'GLOBAL';
$extra   = $cgi->param('extra') || '';

# Which commands are supported, and is a password required?
%commands = (   'changeaddr'    => 1,
                'faq'           => 0,
                'help'          => 0,
                'info'          => 0,
                'intro'         => 0,
                'lists'         => 0,
                'set'           => 1,
                'show'          => 1,
                'subscribe'     => 0,
                'unsubscribe'   => 1,
            );
             
# Generate temporary password for increased security.
if (defined $passw and $passw !~ /^[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}$/) {
  $passw   = $mj->gen_latchkey($passw) if (length $passw);
}

($ok, $mess) = $mj->connect('mj_wwwusr', $sess, $user);
unless ($ok) {
  $mess .= "Please contact <a href=\"mailto:$serveradmin\">$serveradmin</a> for assistance\n";
  &surrender($mess);
} 

# Extract "mode" from command name
if ($ofunc =~ /([^\s=-]+)[=-](.*)/) {
  $func = $1;
  $mode = $2;
}
else { 
  $ofunc =~ /(.*)/; $ofunc = $1;
  $func = $ofunc;
  $mode = '';
}

# Print help information if it was requested
if ($func =~ /about/) {
  &print_header($user, $passw, $site, $cgiurl);
  &usage($mj);
}

no strict 'refs';
##
## Validation section: address, command, list, password 
##
($ok, $mess) = $user->valid;
unless ($ok) {
  $::log->message(50, "info",  "Invalid address $user in form data.");
  &surrender("$user is an invalid address: $mess\n");
}

# Make sure the command is valid
unless (exists $commands{$func}) {
  $::log->message(50, "info",  "Unsupported command $func in form data.");
  &surrender("Illegal command: $func\n");
}
# Make sure the list name is valid
if ($list) {
  unless ($list = $mj->valid_list($list, 0, 1)) {
    $::log->message(50, "info",  "Invalid list $list in form data.");
    &surrender("Invalid list name: $list\n");
  }
}

if ($func =~ /subscribe/ and $user->strip =~ /example\.com$/i) {
  &print_header($user, $passw, $site, $cgiurl);
  print "<h2>Please do not $func example.com addresses.</h2>\n";
  &usage($mj);
}
if ($func =~ /subscribe|set/ and $list eq 'GLOBAL') {
  &print_header($user, $passw, $site, $cgiurl);
  print "<h2>Please select a mailing list before pressing the $func button.</h2>\n";
  &usage($mj);
}

if ($user and $passw) {
  $passw =~ /(.+)/; $passw = $1;
  $ok = 
    $mj->validate_latchkey($user, $passw, 'GLOBAL', 'show'); 
  if (!$ok) {
    $::log->message(50, "info",  "Invalid password in form data.");
    &surrender("The password is invalid or has expired\n");
  }
}

##
## Construct the request
##
$request = {
  'command'   => $func,
  'list'      => $list,
  'mode'      => $mode,
  'password'  => $passw,
  'user'      => $user,
};

# For changeaddr to work, the user and victim must be exchanged.
if ($func eq 'changeaddr') {
  $extra = new Mj::Addr($extra);
  unless (defined $extra and $extra->isvalid) {
    $::log->message(50, "info",  "Invalid new address in changeaddr data.");
    &surrender("The new address ($extra) is invalid\n");
  }
  $request->{'user'} = $extra;
  $extra = $user;
}
  
Mj::Parser::parse_args ($request, $extra);
if (function_prop($func, 'iter')) {
  $request->{'command'} .= '_start';
}

# For the 'set' command, convert the CGI data into the appropriate settings.
if ($func eq 'set') {
  my ($i, $j, @settings);
  for $j (qw(delivery ack eliminatecc hide prefix replyto selfcopy rewritefrom)) {
    $i = "$list:$j";
    if ($j eq 'delivery') {
      push @settings, $cgi->param($i);
    }
    elsif ($j eq 'hide' or $j eq 'ack') {
      $cgi->param($i) eq 'on' ? 
        push @settings, "${j}all" :
        push @settings, "no$j";
    } 
    else {
      $cgi->param($i) eq 'on' ? 
        push @settings, $j :
        push @settings, "no$j";
    }
  }
  $request->{'setting'} = join ",", @settings;
}

$file = &Majordomo::tempname();
$fh = new IO::File ">$file";
&surrender("Unable to create temporary file.\n") unless defined $fh;

if ($func ne 'show' and $func ne 'lists') {
  $result = $mj->dispatch($request); 
  &surrender("Unable to obtain result from Majordomo.\n") unless $result;
  print $fh "<pre>\n";
  &{"Mj::Format::$func"}($mj, $fh, $fh, 'html', $request, $result);
  print $fh "</pre>\n";
}

# There are three screens which this script displays.  The
# first is a list of all lists that are visible to the 
# subscriber.  The second contains information about the
# subscriber's account.  The third offers help.

if ($commands{$func} == 1) {
  $request->{'command'} = "show";
  if ($func eq 'changeaddr') {
    # restore original user if changeaddr did not succeed.
    $request->{'user'} = $user if ($result->[0] < 1);
    undef $request->{'victim'};
    undef $request->{'victims'};
  }
  $result = $mj->dispatch($request); 
  &surrender("Unable to obtain result from Majordomo.\n") unless $result;
  &Mj::Format::show($mj, $fh, $fh, 'html', $request, $result);
}

# Do not display the list of lists when the help system is used.
elsif ($func ne 'help') {
  $request->{'command'} = "lists";
  $result = $mj->dispatch($request); 
  &surrender("Unable to obtain result from Majordomo.\n") unless $result;
  &Mj::Format::lists($mj, $fh, $fh, 'html', $request, $result);
}

$fh->close();
&print_header($request->{'user'}, $passw, $site, $cgiurl);
&format_print($file);
&print_footer($serveradmin);
unlink $file;

#---------------- Subroutines -----------------#

sub Mj::Format::help {
  my ($mj, $out, $err, $type, $request, $result) = @_;
  my $log = new Log::In 29, $request->{'topic'};
  my ($chunk, $chunksize, $topic);
  my ($ok, $mess) = @$result;

  select $out;
  unless ($ok > 0) {
    print "Help $request->{'topic'} failed.\n$mess";
    return $ok;
  }

  $chunksize = $mj->global_config_get($request->{'user'}, $request->{'password'},
                                      "chunksize");
  return unless $chunksize;

  $request->{'command'} = "get_chunk";

  while (1) {
    ($ok, $chunk) = @{$mj->dispatch($request, $chunksize)};
    last unless defined $chunk;
    $chunk = Mj::Format::escape($chunk);
    $chunk =~ s/(\s{3}|&quot;)(help\s)(configset|admin|mj) (?=\w)/$1$2$3_/g;
    $chunk =~ s/(\s{3}|&quot;)(help\s)(\w+)/$1$2<a href="$cgiurl?domain=$domain&func=help&extra=$3">$3<\/a>/g;
    print $chunk;
  }

  $request->{'command'} = "get_done";
  $mj->dispatch($request);
  select STDOUT;
}

sub Mj::Format::lists {
  my ($mj, $out, $err, $type, $request, $result) = @_;
  my ($list, $cat, $desc, $flags);
  my ($ok, $mess, @listdata) = @$result;
  select $out;
  # Iterate over lists and add form buttons
  if (! $ok) {
    print <<EOM;
<h2>Error: $mess</h2>
If you received an "Invalid password" error, here are 
the possible causes:
<ul>
<li>The address in the <b>address</b> box is not registered at this site.
<li>The password in the <b>password</b> box is incorrect.
</ul>
A password is necessary if you wish to use the <b>show, set,</b>
or <b>unsubscribe</b> command.
<p>
A password is probably not necessary if you wish to use the <b>subscribe,
faq, help, info, intro, lists</b>, or <b>about this service</b> command.
EOM

    return;
  }
  print <<EOM;
<input type=submit name=func value=subscribe>
<input type=submit name=func value=faq>
<input type=submit name=func value=info>
<input type=submit name=func value=intro><br>
<b>Select a mailing list, then press one of the buttons above.
Leave the password box empty unless you have already been
assigned a password by majordomo at this site.</b>
<pre>
EOM
  for (@listdata) {
    ($list, $cat, $desc, $flags) =  @$_;
    $desc ||= "(no description)";
    print "<input type=radio name=list value=$list>";
    printf "%-24s %-12s %s\n", $list, $cat, $desc;
  }
  unless (@listdata) {
    print "There are no public lists at this site.\n";
  }
  print "</pre></form>\n";
  select STDOUT;
}

sub Mj::Format::show {
  my ($mj, $out, $err, $type, $request, $result) = @_;
  my ($i, $j, @lists, $lfull, $class, $subtime); 
  my ($lflags, $lchangetime, $changetime);
  my ($ok, $listdata) = @$result;
  select $out;

  # Present the data, including form buttons.
  if ($ok < 1) {
    print "<h2>Error for show command: $listdata->{'error'}</h2>\n";
    return $ok;
  }
  unless ($listdata->{'regdata'}) {
    print "<h2>$request->{'user'} is not registered</h2>\n";
    return 1;
  }
  if (@{$listdata->{'aliases'}}) {
    print "<br>Aliases:<ul>\n";
    for $i (@{$listdata->{'aliases'}}) {
      next if $i eq $listdata->{'strip'};
      print "<li>$i\n";
    }
    print "</ul>\n";
  }
  @lists = sort keys %{$listdata->{'lists'}};
  unless (@lists) {
    print <<EOM;
<p>$request->{'user'} is not subscribed to any lists.
<br>
<input size=48 name=extra>
<input type=submit name=func value="changeaddr"><br>
To change addresses, type your new address into the box
and press the <b>changeaddr</b> button.  Majordomo may send
a message to your new address asking for confirmation.
</form>
EOM
    return 1;
  }

  print <<EOM;
<input type=submit name=func value="set">
<input type=submit name=func value="unsubscribe">
<input type=submit name=func value="changeaddr">
<p>
To unsubscribe, press the radio button for the 
appropriate list, then press the <b>unsubscribe</b> button.
<p>
To change settings, press the radio button for a
list, choose the settings you want, then press the <b>set</b> button
above.  The settings are described at the bottom of this page.
<p>
To change addresses, type your new address into this box:<br>
<input size=48 name=extra><br>
and press the <b>changeaddr</b> button.  Majordomo may send
a message to your new address asking for confirmation.
<p>
EOM

  print "<table border><th>Mailing List<th>Delivery Mode<th>Ack<th>EliminateCC\n";
  print "<th>Hide<th>Prefix<th>ReplyTo<th>SelfCopy<th>RewriteFrom\n";
  for $i (@lists) {
    $lfull      = $listdata->{'lists'}{$i}->{'fulladdr'};
    $class      = $listdata->{'lists'}{$i}->{'class'};
    $subtime    = $listdata->{'lists'}{$i}->{'subtime'};
    $changetime = $listdata->{'lists'}{$i}->{'changetime'};
    $lflags     = $listdata->{'lists'}{$i}->{'flags'};
    print <<EOM;
    <tr><td align=center><input type=radio name=list value=$i>$i<br>
    <td align=center><select name="$i:delivery">
EOM
    for $j (qw (each digest nomail)) {
      if ($class eq $j) {
        print "<option selected> $j\n"; 
      }
      else {
        print "<option> $j\n";
      }
    }
    print "</select>\n";
    for $j (@{$lflags}) {
      $j =~ /(no)?(.+)/;  print $1 ?
          "<td align=center><input type=checkbox name=\"$i:$2\">\n"
        : "<td align=center><input type=checkbox name=\"$i:$2\" checked>\n";
    }
  }
  print "</table></form>\n";
  print "$request->{'user'} was registered on ".gmtime($listdata->{'regdata'}->{'regtime'})." UTC.<br>\n";

  print <<EOM;
<h2 align=center>What do the settings mean?</h2>
<ul>
<li>Delivery Mode: "each" means that you will receive each
message.  "digest" means that messages will be bundled into
a collection called a digest, which is sent periodically.
"nomail" means that you will receive no mail from the list.
This is a useful setting if you wish to postpone mail 
while you are traveling, for example.
<li>Ack:  Select this if you want to receive acknowledgements if your
posted messages need to be reviewed by the list owners
before they appear on a mailing list.
<li>EliminateCC: Select this if you do not want two copies
when someone sends a message both to you and to the list.
<li>Hide:  Select this if you do not want your address to appear
when someone reviews the list of subscribers.
<li>Prefix:  Select this if you want to see a prefix which indicates
the name of the mailing list in the Subject header of every message.
This only matters if the list owners have configured the list to
create a prefix.
<li>ReplyTo:  Select this if you want your replies to go to the
mailing list instead of to the person who wrote the original message.
This only matters if the list owners have configured the list to 
allow replies to go to the list.
<li>SelfCopy:  Select this if you want to receive a copy of messages
that you post to the mailing list.
<li>RewriteFrom:  Select this if you want to change the From header 
in messages you send to the list.  The From header will then be
rewritten to appear as it did when you subscribed to the list.
</ul>
EOM
  select STDOUT;
}
  
sub format_print {
  my $file = shift;
  my ($line, $summarize, $hdrs);
  $summarize = $hdrs = 0;
  select STDOUT;

  $fh = new IO::File "<$file";
  if (! $fh) { 
    print  "<h3>Unable to get results</h3>\n";
    exit 0;
  }
  while ($line = $fh->getline()) { print $line; }
  $fh->close();
}

sub usage {
  my ($mj) = shift;
  my $site = $mj->global_config_get(undef, undef, 'site_name');
  my $serveraddr = $mj->global_config_get(undef, undef, 'whoami');
  my $serveradmin = $mj->global_config_get(undef, undef, 'whoami_owner');
  my $usrcgi = sprintf "http://%s:%s/%s?domain=$domain", $ENV{'SERVER_NAME'},
          $ENV{'SERVER_PORT'}, $ENV{'SCRIPT_NAME'}, $user;

  print <<EOM;
<p>
This an introduction to the Majordomo 2 subscriber interface.
<p>
This interface serves two main purposes.  The first is to 
allow the public to learn about and subscribe to the mailing 
lists at $site.  The second is to allow subscribers to change
the settings for their subscriptions and to remove themselves
from mailing lists.
<p>
Four buttons are always present:
<ul>
<li><b>about this service</b> shows this help page.
<li><b>help</b> takes you into the majordomo help pages.
<li><b>lists</b> shows all public mailing lists at this site.  
<li><b>show</b> allows you to change your settings (password required).
<br>Four buttons will be added when viewing the list of lists:
<ul>
<li><b>subscribe</b> causes your address to be added
to the mailing list you have chosen.  Make sure
that your e-mail address appears in the "address:" box.
Unless you have already subscribed to at least one
list at this site, pressing this button will cause
a confirmation e-mail message to be sent to your address.
Follow the instructions in that message to complete
your subscription.
<li><b>faq</b> displays a list of frequently asked questions
and answers for a mailing list, if one exists.
<li><b>info</b> displays the "welcome message" that all
new subscribers receive.  It usually describes the policies
of the list owners.
<li><b>intro</b> displays an introduction to the topics
which are discussed on the mailing list, if one exists.
</ul>

Each mailing list has a radio button to the left
of its name.  It is important that you choose a mailing
list before pressing the <b>subscribe, faq, info</b> or
<b>intro</b> buttons.
<li><b>show</b> displays information about your account
if you have already subscribed and if you have typed your
password into the "password:" box.  If you press the 
<b>show</b> button without using your password, you 
will see the list of mailing lists instead.
<p>
If you want to access your account, add a solidus ("/")
and your e-mail address to this URL, for example: <br>
 <a href="$usrcgi">$usrcgi</a><br>
and bookmark that page for future reference.
When the list of lists appears, type in your password and
press the <b>show</b> button.  Your password appears in the 
welcome message you receive every time you subscribe to 
a mailing list, so be sure to save those messages.
<p>
It is possible for you to subscribe to mailing lists without
using a password.  However, using your password may
save you an extra step.  Confirmation instructions
will be sent via e-mail to your address if you do not
use your password.
<p>
Instructions for changing your account appear at the bottom of the 
screen after you press the <b>show</b> button.
</ul>
<hr>
If you have questions about this service, please write to
the site administrator at
<a href="mailto:$serveradmin">$serveradmin</a>.
EOM

  exit 0;
}

sub surrender {
  my ($message) = shift;
  print <<EOM;
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
"http://www.w3.org/TR/REC-html40/strict.dtd"> 
<html><head>
<title>Majordomo 2 WWW for Subscribers: Error</title>
</head>
<body>
<h2>Error</h2>
$message;
</body></html>
EOM
  exit 0;
}

# XXX Move this to a template file.
sub print_header {
  my ($user, $passw, $site, $cgiurl) = @_;
  $user = Mj::Format::escape($user);
  select STDOUT;
  print <<EOM;
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
"http://www.w3.org/TR/REC-html40/strict.dtd"> 
<html><head>
<title>Majordomo 2 WWW for Subscribers</title>
</head>
<body>
<h2 align=center>List Information and Account Maintenance</h2>
Welcome to $site!  Here you will find information about our
mailing lists and your account on our Majordomo 2 list server.
<ul>
<li>Press <b>about this service</b> to see a detailed
introduction.
<li>Press <b>help</b> to browse the majordomo help pages.
<li>Press <b>lists</b> to see a list of mailing lists
at $site.
<li>Press <b>show</b> to see details about your account.
(password required)
</ul>
EOM

  print "<h4 align=center>Type your address into the first box</h4>\n"
    if ($user =~ /example\.com$/i);

  print <<EOM;
<form method=POST action="$cgiurl">
<input type=hidden name=domain value="$domain">
address:
<input size=44 name=user value="$user">
password:
<input size=16 name=passw type=password value="$passw"><br>
<input type=submit name=func value="about this service">
<input type=submit name=func value="help">
<input type=submit name=func value="lists">
<input type=submit name=func value="show">
EOM
}

sub print_footer {
  my ($serveradmin) = shift;
  select STDOUT;
  print <<EOM;
<hr>
For assistance, please contact
<a href="mailto:$serveradmin">$serveradmin</a>.
</body></html>
EOM
}

=head1 COPYRIGHT

Copyright (c) 2000 Jason Tibbitts for The Majordomo Development
Group.  All rights reserved.

This program is free software; you can redistribute it and/or modify it
under the terms of the license detailed in the LICENSE file of the
Majordomo2 distribution.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the Majordomo2 LICENSE file for more
detailed information.

=cut

#^L
### Local Variables: ***
### cperl-indent-level:2 ***
### End: ***


