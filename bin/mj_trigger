#!/usr/local/bin/perl-latest -wT
BEGIN {
  $::LIBDIR = "/nowhere";
  $::LISTDIR= "/nowhere";
  $::TMPDIR = "/nowhere";
  $::LOCKDIR= "blah";
  $::UID    = "baduid";
  $::GID    = "badgid";
  $::UMASK  = "007";
  @::DOMAINS= (qw(none));

  $SIG{__WARN__} = sub {print STDOUT "--== $_[0]"};

  # Redirect STDERR as soon as possible to catch errors and warnings
  if (! -t STDOUT) {
    open (STDOUT, ">>$::TMPDIR/mj_trigger.debug") or
      die "Can't redirect debug output to $::TMPDIR/mj_trigger.debug: $!";
  }
}

=head1 NAME

mj_trigger - Simple Majordomo event trigger

=head1 DESCRIPTION

mj_trigger is a program designed to be put into the Majordomo user''s
crontab and called periodically to inform Majordomo that it is time to
execute its periodic functions.

Majordomo currently understands hourly and daily functions.

A sample crontab entry looks like:

# Run the daily trigger at midnight
0 0 * * * /path/to/mj_trigger C<-t> daily
# Run the hourly trigger at the top of each hour
0 * * * * /path/to/mj_trigger C<-t> hourly

Several functions are performed by the triggers, and each
has a separate argument to the C<-t> switch:

=item B<bounce> or B<vacation>

Expire subscriber data, such as bounces (controlled by the
I<bounce_max_age> configuration variable) and vacation settings.

=item B<checksum>

Expire duplicate message checksums and message-ids, as
indicated by the I<dup_lifetime> configuration setting.

=item B<digest>

Issue digests, as indicated by the I<digests> configuration setting.

=item B<log>

Remove log entries older in days than the I<log_lifetime> configuration
setting.

=item B<session>

Remove session data older than the I<session_lifetime> setting.

=item B<token>

Send reminders, and expire old requests and temporary passwords
(as required by the I<token_remind>, I<token_lifetime>, 
 and I<latchkey_lifetime> settings).

Excepting B<digest>, which has its own setting, 
these triggers are invoked by the B<daily> trigger, or by the
B<hourly> trigger at the times indicated by the I<triggers> 
configuration setting.

=cut

use lib "$::LIBDIR";
use strict;
use Majordomo;
use Mj::Log;
use Mj::Lock;
use Getopt::Std;
use vars qw($program_name);

my(%opts, @mess, $approved, $dom, $fh, $fname, $head, $in_body,
   $inmsg, $list, $mess, $mj, $ok, $request, $sender, $sess, $tlist, $top);

die("Not running as UID $::UID") unless $> == $::UID;
die("Not running as GID $::GID") unless $) == $::GID;

umask oct($::UMASK);

$ENV{'PATH'} = "/bin:/usr/bin:/usr/ucb";

# Parse the command line arguments.
# -d - specify the domain
# -t - specify the trigger type
# -v - debug level
getopts('d:t:v:', \%opts);

# Untaint the domain
if ($opts{d}) {
  $dom  =  $opts{d};
  $dom =~ /([a-zA-Z0-9\-\.]+)/;
  $dom = $1;
  @::DOMAINS=($dom) if $dom;
}
$opts{v} ||= 0;

# Open a log
$::log = new Mj::Log;
$::log->add
  (method      => 'handle',
   handle      => \*STDOUT,
   id          => "mjr",
   level       => ($opts{v} =~ /^(\d+)$/)[0] || 0,
   subsystem   => 'mail',
   log_entries => 1,
   log_exits   => 1,
   log_args    => 1,
  );

$::log->in(20, undef, "info", "Majordomo periodic trigger - ".scalar(localtime));
$::log->startup_time();

$request = {
    'command'   => 'trigger',
    'list'      => 'GLOBAL',
    'mode'      => $opts{t},
    'password'  => '',
    'user'      => 'unknown@anonymous',
};

for my $i (@::DOMAINS) {
  $::log->in(21, undef, "info", "Triggering domain $i");

  $::mj = new Majordomo $::LISTDIR, $i;
  $mj = $::mj;  # for config default access to globals

  $mj->connect('trigger', 'no info available');
  $mj->dispatch($request);

  $::log->message(50, "info", "-----Calling destructors-----");
  undef $mj;
  undef $::mj;
}

$::log->message(50, "info", "-----Expiring locks-----");
# We have to do this while we aren't holding any locks at all.  That means
# we can't even call it through a Majordomo object.  This is a layering
# violation, but the simple act of connecting will lock a session, which
# locks the global lock, which prevents things from expiring.  Note that
# this will hang indefinitely while the global lock is held by someone
# else.  On Linux this does not prevent other processes from acquiring the
# global lock, but on some other OSes it might.  Sigh.
Mj::Lock::expire_locks() if $opts{t} =~ /^d/;

$::log->out;

exit 0;

=head1 COPYRIGHT

Copyright (c) 1997, 1998 Jason Tibbitts for The Majordomo Development
Group.  All rights reserved.

This program is free software; you can redistribute it and/or modify it
under the terms of the license detailed in the LICENSE file of the
Majordomo2 distribution.

his program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the Majordomo2 LICENSE file for more
detailed information.

=cut

#
### Local Variables: ***
### mode:cperl ***
### cperl-indent-level:2 ***
### End: ***
