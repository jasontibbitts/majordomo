#!/usr/bin/perl -wT
BEGIN {
  $::BINDIR = "/path/to/bin";
  $::TMPDIR = "/tmp/mj";
  $::UID    = "baduid";
  $::GID    = "badgid";
  $::TIMEOUT = 30;
  $::CONCURRENCY = 5;
  $::SIG_CHLD_IGNORE = 1;
  $SIG{__WARN__} = sub {print STDERR "--== $_[0]"};

  # Zmailer defines the input field separator.  Untaint it.
  delete $ENV{'IFS'};

  # Redirect standard error output.
  if (! -t STDERR) {
    open (STDERR, ">>$::TMPDIR/mj_queueserv.debug") or
      die "Can't redirect debug output to $::TMPDIR/mj_queueserv.debug: $!";
  }

  # Croak if install was botched
  die("Not running as UID $::UID") unless $> == $::UID;
  die("Not running as GID $::GID") unless $) == $::GID;
}

use Socket;
use POSIX;
use Symbol;
use strict;
$|=1;
$ENV{PATH} = '';

sub logmsg { 
  print STDERR "[$$].Queueserv: @_\n"; 
}

sub out { 
  my $w = ''; 
  vec($w, fileno($_[0]), 1) = 1; 
  logmsg "Out: $_[1]"; 
  syswrite($_[0], $_[1], length($_[1])) 
    if (select(undef, $w, undef, .25) == 1); 
}

sub in { 
  logmsg "In..."; 
  sysread($_[0], $_, 1024); 
  logmsg "In: $_"; $_ 
};

my(@child, @parent, $ein, $eout, $expire, $i, $in, $line, $nfound, $out,
    $pid, $ping, $rin, $rout, $status, $use_child, $wait, $win, $wout);

my $sock = "$::TMPDIR/mj_queueserv.sock";
my $uaddr = sockaddr_un($sock);
my $proto = getprotobyname('tcp');
my $debug = '';
$debug = " -v $ARGV[0]" if defined $ARGV[0];
$debug =~ /(.*)/; $debug = $1; # Only mj_enqueue calls us, so $ARGV[0] is safe.

# Become a daemon
$pid = fork;
exit if $pid;
die "Couldn't fork: $!" unless defined($pid);
POSIX::setsid() or die "Can't start a new session: $!";

# Set up a bit of signal handling
$SIG{PIPE} = 'IGNORE';
if ($::SIG_CHLD_IGNORE) {
  $SIG{CHLD} = 'IGNORE';
}
else {
  $SIG{CHLD} = sub {while (waitpid(-1, &WNOHANG) > 0) {}};
}

logmsg("Majordomo Queue Server - ".scalar(localtime));

socket(Server,PF_UNIX,SOCK_STREAM,0)        or die "socket: $!";
unlink($sock);
bind  (Server, $uaddr)                      or die "bind: $!";
listen(Server,SOMAXCONN)                    or die "listen: $!";

logmsg "Server started on $sock";

# Time at which shutdown will occur.
$expire = 0;

# Loop until we exit explicitly
MAIN:
while (1) {

  last if ($expire and (time >= $expire));
  if ($expire) {
    $wait = $expire - time;
  }
  else {
    $wait = $::TIMEOUT * $::CONCURRENCY;
  }

  # Select on the Socket, time out after a while
  $rin = $win = $ein = ''; vec($rin,fileno(Server),1) = 1; $ein = $rin | $win;
  $nfound = select($rout=$rin, $wout=$win, $eout=$ein, $wait);

  # select returns 0 on a timeout
  if ($nfound == 0) {
    # Check each child; do not exit if any may still be running.
    if (scalar @child) {
      ping_runners('Bye', \@child);
      @child = grep { defined } @child;
      next if (scalar @child);
    }
    logmsg "Timed out";
    last;
  }

  # select returns -1 if interrupted by a system call (like SIGCHLD)
  next if $nfound < 0;

  # Got a connection, accept it
  logmsg "Got connection";
  accept(Client,Server);
  logmsg "Accepted connection";

  $line = in(*Client);
  close Client;

  if ($expire and (time < $expire)) {
    logmsg "The queue server is waiting to shut down; queueing";
    next;
  }

  if ($line =~ /quit (\d+)/i) {
    logmsg "Asked to quit; shutting down in $1 seconds";
    $expire = time + $1;
    last unless ($1);
  }

  # Compress the child list
  @child = grep { defined } @child;

  # Find a child that can read or start a new one
  $use_child = ping_runners('Ping', \@child);

  if (! defined($use_child) && @child < $::CONCURRENCY) {
    $i = scalar(@child);
    logmsg "Starting new runner $i";

    # Setup a pipe set for the child
    $child[$i]  = gensym(); 
    $parent[$i] = gensym(); 
    socketpair($child[$i], $parent[$i], AF_UNIX, SOCK_STREAM, PF_UNSPEC) 
      or die "Socketpair failure: $!";

    # Set autoflush
    &af($child[$i]);
    &af($parent[$i]);

    # Start a runner
    if (!($pid = fork)) {
      die "Cannot fork: $!" unless defined $pid;

      #logmsg "Starting runner";
      close $child[$i];

      # Reset SIGCHLD handler to avoid a perl warning
      $SIG{CHLD} = 'DEFAULT';

      # Redirect stdin and out so the runner is simple
      $in = fileno($parent[$i]);
      $out= fileno($parent[$i]);
      open *STDIN , "<&$in";
      open *STDOUT, ">&$out";

      exec "$::BINDIR/mj_queuerun$debug";
      die "Unable to execute $::BINDIR/mj_queuerun: $!";
    }
    else {
      # Parent...
      close $parent[$i];

      # Get back the greeting. XXX The timeout is arbitrary and should be
      # tuneable.
      $rin = $win = $ein = ''; 
      vec($rin,fileno($child[$i]),1) = 1; 
      $ein = $rin | $win;

      if (select($rout=$rin, $wout=$win, $eout=$ein, 30)) {
	$line = in($child[$i]);
	logmsg "Runner is awake, said $line";
	$use_child = $i;
      }
      else {
	# The child never said hello...
	logmsg "Runner did not respond.";
	next;
      }
    }
  }
  if (!defined($use_child)) {
    next;
  }

  # Tell the client to go.
  unless (out($child[$use_child], "Parent $$ sending")) {
    # It was alive just a second ago, but now it's dead or not responding.
    # So we just pretend we have high load.
    next;
  }

  # Get the response back from the client
  $line = in($child[$use_child]);
}

# Out of while() loop; time to die.
logmsg "Shutting down";
exit;

sub af {
  my $sock = shift;
  my ($tmp);
  # Autoflush the socket
  $tmp = select;
  select $sock;
  $| = 1;  
  select $tmp;
}

sub ping_runners {
  my ($ping, $children) = @_;
  my ($ein, $eout, $i, $line, $message, $nfound, $rin, $rout, $status,
      $use_child, $win, $wout);

  for ($i = 0; $i < @$children; $i++) {
    # Ping a child; if we fail while writing, it's dead.  If the response
    # doesn't come back soon, it's busy.  Note that we have to exclude
    # buffered ping responses here, so we send along the time.
    $message = "$ping " . time;
    $status = out($children->[$i], $message);
    if (! defined ($status)) {
      logmsg "$i is dead";
      close $children->[$i];
      undef $children->[$i];
      next;
    } 
    elsif ($status == 0) {
      # select() timed out, system may be heavily loaded
      logmsg "$i is not responding";
      next;
    }

    # We want to get a response, but there may be buffered responses to
    # previous pings that the client did not answer immediately.
    while(1) {
      # Clear and set the status variables for select().
      $rin = $win = ''; 
      vec($rin, fileno($children->[$i]), 1) = 1; 
      $ein = $rin | $win;

      $nfound = select($rout=$rin, $wout=$win, $eout=$ein, .25);
      if ($nfound && $rout) {
	$line = in($children->[$i]);
	unless (defined($line) && (length($line))) {
	  logmsg "Empty response from $i";
	  close $children->[$i];
	  undef $children->[$i];
	  last;
	}

	# If the response has Exiting anywhere, the client is gone
	if ($line =~ /Exiting/) {
	  logmsg "$i has exited";
	  close $children->[$i];
	  undef $children->[$i];
	  last;
	}

	# If we got the ping back, we're set
	elsif ($line =~ /$message$/) {
	  logmsg "$i pinged successfully";
          return $i;
	}
	else {
	  logmsg "$i had stale response";
	  next;
	}
      }
      else {
	logmsg "$i is busy";
        return $i if ($ping eq 'Bye');
	last;
      }
    }
  }
  return;
}

=head1 NAME

mj_queueserv - Overseer of mj_queuerun processes.

=head1 SYNOPSIS

Started only from mj_enqueue; not to be run by hand.

=head1 DESCRIPTION

mj_queueserv, the Majordomo mail queue server, is a small process that
oversees a collection of queue runner processes.  It is intended to be
started by the mj_enqueue program; no more than one mj_queueserv process
should be active at any time.

mj_queueserv immediately forks and disassociates itself from its parent
process so it can run as a daemon.  It opens a socket and awaits
connections from other Majordomo programs, such as mj_enqueue,
mj_queuerun, or mj_shutdown.  If it sits idle for a period of time or if
instructed to shut down (see L<mj_shutdown>) it will exit.

Whenever an mj_enqueue process stores an e-mail message in the message queue, 
it contacts the queue server and indicates that the message should be
processed.  If the queue server is already managing one or more queue
runners, it will attempt to contact each queue runner in turn until
it finds one that is not busy.  If no existing queue runner is
available, and the maximum number of queue runners will not be exceeded,
the queue server will start a new queue runner.  If a new queue runner
cannot be started, the queue server notes that the system is busy,
and waits for the next incoming message from the mj_enqueue program.

=head1 COPYRIGHT

Copyright (c) 1999 Jason Tibbitts for The Majordomo Development
Group.  All rights reserved.

This program is free software; you can redistribute it and/or modify it
under the terms of the license detailed in the LICENSE file of the
Majordomo2 distribution.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the Majordomo2 LICENSE file for more
detailed information.

=cut

#
### Local Variables: ***
### mode:cperl ***
### cperl-indent-level:2 ***
### End: ***
