#!/usr/local/bin/perl-latest -wT
BEGIN {
  $::LIBDIR = 'unset';
  $::LISTDIR= 'unset';
  $::DEFDOM = 'unset';
  $::TMPDIR = 'unset';
  $::LOCKDIR= "blah";
  $::UMASK  = "007";
  $SIG{__WARN__} = sub {print STDERR "--== $_[0]"};

  # Redirect standard error output.
  if (! -t STDERR) {
    open (STDERR, ">>$::TMPDIR/mj_wwwadm.debug");
  }
}

=head1 NAME

mj_wwwadm - demonstration of majordomo administration via the WWW.

=head1 SYNOPSIS

Extend this file to create specialized CGI scripts.

=head1 DESCRIPTION

When utilizing majordomo with a CGI script, there are
several basic steps that must be taken, including initializing
majordomo variables,  creating a log (STDERR by default), 
initializing a CGI object, and starting a majordomo session
with connect().

This script performs these basic steps, easing the 
creation of new CGI scripts.  Extend it to suit your needs.

Note that it may be necessary to install a setuid wrapper
for any script based upon this template.

=cut
use lib "$::LIBDIR";
use strict;
use CGI;
use Majordomo;
use Mj::Format;
use Mj::Parser;
use Mj::CommandProps qw(:command :function);
use Mj::Log;
use Mj::Addr;

my ($cgi, $domain, $i, $mj, $ok, $mess, $serveradmin, $sess, $token, $listbox);
my ($ofunc, $func, $user, $passw, $pathinfo, $mode, $list, @lists, $vict, $extra);
my ($line, $st, $file, $fh, $cgiurl, $cmdform, $localpart, $request, $req, @extra);
my (%seen, @mlists);

$ENV{'PATH'} = "/bin:/usr/bin:/usr/ucb";

umask oct($::UMASK);

# Change the log level to a higher number (600) for complete debugging.
$::log = new Mj::Log;
$::log->add
  (
   method      => 'handle',
   id          => 'mjadm',
   handle      => \*STDERR,
   level       => 50,
   subsystem   => 'mail',
   log_entries => 1,
   log_exits   => 1,
   log_args    => 1,
  );

$::log->in(20, undef, "info", 
  "Majordomo WWW Admin - ".scalar(localtime)." from $ENV{'REMOTE_ADDR'}");
$::log->startup_time();

# Start up the page and parse the URL
$cgi = new CGI;
print $cgi->header;
# XXX adapt to allow per-domain customization
$domain = $::DEFDOM;

# Make the Majordomo object
$mj = new Majordomo $::LISTDIR, $domain;
unless (ref $mj) {
  print <<EOM;
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
"http://www.w3.org/TR/REC-html40/strict.dtd"> 
<html><head>
<title>Majordomo 2 Administration: Error</title>
</head>
<body>
<h2>Error: $mj</h2>
</body></html>
EOM
  exit 0;
}

# XXX adapt to allow per-domain customization
$cgiurl = $mj->{'sitedata'}{'config'}{'cgi_url'} . "mj_wwwadm";

# Generate the session information
for my $i ('REMOTE_ADDR','REMOTE_PORT', 'PATH_INFO') {
  $sess .= "$i = $ENV{$i}\n" if defined $ENV{$i};
}
$sess .= scalar(localtime(time)) . "\n";
$serveradmin = $mj->_global_config_get('whoami_owner');

($ok, $mess) = $mj->connect('mj_wwwadm', $sess);
unless ($ok) {
  print <<EOM;
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
"http://www.w3.org/TR/REC-html40/strict.dtd"> 
<html><head>
<title>Majordomo 2 Administration: Error</title>
</head>
<body>
<h2>Error: $mess</h2>
Please contact
<a href="mailto:$serveradmin">$serveradmin</a> and report
this error.
</body></html>
EOM
  exit 0;
}

$pathinfo = 'GLOBAL';
if (exists $ENV{'PATH_INFO'}) {
  $pathinfo = $ENV{'PATH_INFO'};
  $pathinfo =~ m#/([^/\s]+)#;
  $pathinfo = $1;
}

# GET poses a security risk due to passwords being visible
# Set HTML form variables
$ofunc   = $cgi->param('func') || "help";
$localpart = $ENV{'REMOTE_ADDR'} || "mj_wwwadm";
$user    = new Mj::Addr("$localpart\@example.com");
$passw   = $cgi->param('passw') || '';
@lists   = $cgi->param('list') or ($pathinfo);
@mlists  = $cgi->param('mlist');
@extra   = $cgi->param('extra');
$st      = $cgi->param('st') || '';
if ($st eq 'on') { $st = 'checked'; }
$extra[0] ||= '';
$extra   = $extra[0];
@lists   = grep (!$seen{$_}++, @lists, @mlists);

# Extract "mode" from command name
if ($ofunc =~ /([^\s=-]+)[=-](.*)/) {
  $func = $1;
  $mode = $2;
}
else { 
  $ofunc =~ /(.*)/; $ofunc = $1;
  $func = $ofunc;
  $mode = '';
}
if (scalar(@lists) > 1) {
  $listbox = "<select name=list>\n";
  for $list (@lists) {
    $listbox .= "<option>$list\n";
  }
  $listbox .= "</select>\n";
  for $list (@lists) {
    $listbox .= "<input type=hidden name=mlist value=$list>\n";
  }
}
else {
  $listbox = "<input size=20 name=list value=\"$lists[0]\">";
}

$cmdform = <<EOM;
<form method=POST action=$cgiurl>
<table><tr><td>
Command:&nbsp;&nbsp;
<select name=func>
<option> about this service
<option> accept
<option> archive-index
<option> archive-get
<option> auxadd
<option> auxremove
<option> auxwho
<option> configshow
<option> configset
<option> configdef
<option> get
<option> help
<option> index-recursive
<option> lists-aux
<option> reject
<option> sessioninfo
<option> set
<option> showtokens
<option> subscribe
<option> subscribe-nowelcome
<option> tokeninfo
<option> unsubscribe
<option> unregister
<option> which
<option> who-enhanced
<option> who-bounces-enhanced
</select>
<td>
<input size=26 name=extra value="$extra">
<td>
<input type=checkbox name=st $st> Show Pending Requests
<tr><td>
Mailing List:&nbsp;&nbsp;
$listbox
<td>
Password:&nbsp;&nbsp;
<input size=16 name=passw type=password value="$passw">
<td>
<input type=submit value="Issue Command">
</table>
</form>
EOM

# Select the previous command.
$cmdform =~ s/option> $ofunc/option selected> $ofunc/;

print <<EOM;
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
"http://www.w3.org/TR/REC-html40/strict.dtd"> 
<html><head>
<title>Majordomo 2 Administration: $func</title>
</head>
<body>
EOM

print $cmdform;

if (! $cgi->param('func') or $func =~ /about/) {
  &usage($mj);
  exit 0;
}

no strict 'refs';
# Make sure the command is valid
unless (command_legal($func)) {
  print "Illegal command: $func\n";
  $::log->message(50, "info",  "Invalid command $func in form data.");
  exit 0;
}

# Make sure the list names are valid
for ($i = 1; $i <= scalar(@lists); $i++) {
  if ($lists[$i-1] ne '') {
    unless ($lists[$i-1] = $mj->valid_list($lists[$i-1], 1, 1)) {
      print "<h3>Invalid list name: $lists[$i-1]</h3>\n";
      $::log->message(50, "info",  "Invalid list $lists[$i-1] in form data.");
      exit 0; 
    }
  }
}

# The archive-get and archive-index commands must use immediate mode,
# to display the results instead of mailing them.
if ($func eq 'archive' or $func eq 'get') {
  $mode .= "-immediate";
}

# Verify the password provided, if the command requires one.
if ($passw eq '' and $func !~ /help|lists|accept|reject|tokeninfo/) {
  print "<h3>You must provide a password to use the $func command</h3>\n";
  exit 0;
}
elsif ($passw ne '') {
  # Check the password against the requester
  for $i (@lists) {
    $ok = $mj->validate_passwd($user, $passw, undef,
                               "mjadm", $i, $func);
    if ($ok <= 0) {
      print "<h3>The password you provided is invalid for the $i list</h3>\n";
      $::log->message(50, "info",  "Invalid password in form data.");
      exit 0;
    }
  }
}

if ($func eq 'auxadd' or $func eq 'auxremove') {
  # The group and mail address must be specified in 'extra'
  if ($extra !~ /\s/) {
    print "<p>When using $func, specify the auxiliary list name\n";
    print "and the e-mail address, in that order.\n";
    exit 0;
  }
}

$request = {
    'auth'      => '',
    'command'   => $func,
    'interface' => 'mjadm',
    'list'      => $lists[0],
    'mode'      => $mode,
    'password'  => ($func =~ /help|which|lists/)? '' : $passw, 
    'user'      => $user,
    'st'        => $st,
};
if (function_prop($func, 'iter')) {
  $request->{'command'} .= '_start';
}
if (scalar @lists > 1){
  $request->{'mlist'} = \@lists;
}

$file = Majordomo::tempname();
$fh = new IO::File ">$file";
if ($func ne 'showtokens') {
  $fh->print("<pre><small>\n") unless ($func eq 'tokeninfo' or $func eq 'who');
  for $req (@extra) {
    Mj::Parser::parse_args($request, $req);
    &{"Mj::Format::$func"}($mj, $fh, $fh, 'html', $request,
      $mj->dispatch($request));
    print $fh "\n";
  }
  $fh->print("</small></pre>\n") unless ($func eq 'tokeninfo' or $func eq 'who');
}

if ($passw and ($st eq 'checked' or $func eq 'showtokens') and @lists) {
  # The password may have been omitted earlier.
  $request->{'password'} = $passw;
  $request->{'command'} = 'showtokens';
  Mj::Parser::parse_args($request, $req);

  print $fh <<EOM;
<form method=POST action=$cgiurl>
<input type=submit name=func value="tokeninfo-full">
<input type=submit name=func value="tokeninfo">
<input type=submit name=func value="accept">
<input type=submit name=func value="accept-archive">
<input type=submit name=func value="reject">
<input type=hidden name=st value=$request->{'st'}>
<input type=hidden name=passw value=$request->{'password'}>
<br>
Choose one or more requests from the following list,
then press one of the buttons.
EOM

  $i = 0;
  for $list (@lists) {
    $request->{'list'} = $list;
    $i += &{"Mj::Format::showtokens"}($mj, $fh, $fh, 'html', $request,
                                      $mj->dispatch($request));
  }

  print $fh "<br>Requests found: $i.<br>\n";
  if ($i > 7) {
  print $fh <<EOM;
<input type=submit name=func value="tokeninfo-full">
<input type=submit name=func value="tokeninfo">
<input type=submit name=func value="accept">
<input type=submit name=func value="accept-archive">
<input type=submit name=func value="reject">
EOM
  }
  print "</form>\n";
}

$fh->print("<hr>For assistance, contact <a href=\"mailto:$serveradmin\">$serveradmin</a>\n");
$fh->close();

&format_print($file, $lists[0]);
unlink $file;

$::log->out;
exit 0;

#---------------- Subroutines -----------------#
sub format_print {
  my ($file, $list) = shift;
  my ($line, $token, $summarize, $hdrs, $remove);
  $summarize = $hdrs = 0;
  $remove = $list eq 'GLOBAL' ? "unregister" : "unsubscribe";

  $fh = new IO::File "<$file";
  if (! $fh) { 
    print STDOUT "<h3>Unable to get results</h3>\n";
    exit 0;
  }
  while ($fh->read($line, 4096)) {
    print STDOUT $line;
  }
  1;
}
 
sub Mj::Format::showtokens {
  my ($mj, $out, $err, $type, $request, $result) = @_;
  my $log = new Log::In 29, "$request->{'list'}";
  my ($count, $created, $data, $ok, $size, @time, $token, @tokens);
  select $out;
  print "<input type=hidden name=list value=$request->{'list'}>\n";

  ($ok, @tokens) = @$result;
  unless ($ok) {
    print "<p>Error.  $tokens[0]\n";
    return 0;
  }
  unless (@tokens) {
    print "<br>There are no pending requests for $request->{'list'}.\n";
    return 0;
  }
  $count = 0;
  print "<table>\n";

  print "<tr><td colspan=5>Requests for $request->{'list'}\n";
  while (@tokens) {
    ($token, $data) = splice @tokens, 0, 2;
    print "<tr>\n";
    print "<td><input type=checkbox name=extra value=\"$token\">$token\n";
    print "<td>$data->{'list'}\n" if ($request->{'list'} eq 'ALL'); 
    if ($data->{'type'} eq 'consult') {
      print "<td>O\n";
    }
    else {
      print "<td>S\n";
    }
    $size = '';
    if ($data->{'command'} eq 'post' and $data->{'size'}) {
      $size = sprintf "(%2d&nbsp;kB)", ($data->{'size'} + 512) / 1024;
    }
    print "<td>$data->{'command'}&nbsp;$size\n";
    @time = localtime($data->{'time'});
    $created = sprintf "%.2d-%.2d&nbsp;%.2d:%.2d", 
      $time[4]+1, $time[3], $time[2], $time[1];
    print "<td>$created\n";
    print "<td>" . Mj::Format::escape($data->{'user'}) . "\n"; 
    $count++;
  }
  print "</table>\n";
  select STDOUT;
  $count;
} 

sub Mj::Format::tokeninfo {
  my ($mj, $out, $err, $type, $request, $result) = @_;
  my $log = new Log::In 29, "$request->{'token'}";
  my ($body, $chunk, $chunksize, $cgiurl, $cmd, $expire);
  my (@reasons, $showspool, $time, $tmp, $user);
  # XXX Allow multiple domains
  $cgiurl = $mj->{'sitedata'}{'config'}{'cgi_url'} . "mj_wwwadm";
  my ($ok, $data, $sess) = @$result;
  select $out;

  unless ($ok > 0) {
    print "<p>Error. $data\n";
    return $ok;
  }
  
  $time   = localtime($data->{'time'});
  $expire = localtime($data->{'expire'});
  $user   = Mj::Format::escape($data->{'user'});
  $cmd    = Mj::Format::escape($data->{'cmdline'});

  print <<EOM;
<table>
<tr><td>Token  <td>$request->{'token'}
<tr><td>Created<td>$time
<tr><td>By     <td>$user
<tr><td>Type   <td>$data->{'type'}
<tr><td>Command<td>$cmd
<tr><td>Expires<td>$expire
EOM

  if ($data->{'arg2'}) {
    @reasons = split "\002", $data->{'arg2'};
    for (@reasons) {
      printf "<tr><td>Reason<td>%s\n", Mj::Format::escape($_);
    }
  }

  print "</table>\n";

  print <<EOM;
<form action=$cgiurl method=POST>
<input type=submit name=func value=accept>
<input type=submit name=func value=accept-archive>
<input type=submit name=func value=reject>
<input type=hidden name=extra value='$extra'>
<input type=hidden name=list value=$request->{'list'}>
<input type=hidden name=passw value=$request->{'password'}>
<input type=hidden name=st value=$request->{'st'}>
EOM

  if (exists $request->{'mlist'} and (ref $request->{'mlist'} eq 'ARRAY')) {
    for (@{$request->{'mlist'}}) {
      print "<input type=hidden name=mlist value=$_>\n"
        unless ($list eq $_);
    }
  }

  if ($sess) {
    $request->{'command'} = "get_chunk";
    $body = $showspool = 0;
    $chunksize = $tmp =
      $mj->global_config_get($request->{'user'}, $request->{'password'},
                             $request->{'auth'}, 'mjadm', "chunksize");
    if ($request->{'mode'} eq 'full' and $data->{'command'} eq 'post') {
      $chunksize = 1;
      $showspool = 1;
    }
    print "<pre><small>\n";
    while (1) {
      ($ok, $chunk) = @{$mj->dispatch($request, $chunksize)};
      last unless defined $chunk;
      if ($showspool and !$body and $chunk =~ /^\r?\n/) {
        $body = 1;
        $chunksize = $tmp;
        print "</small>\n";
      }
      print Mj::Format::escape($chunk);
    }
    print "</small>" unless $showspool;
    print "</pre>\n";

    $request->{'command'} = "get_done";
    $mj->dispatch($request);

    if ($data->{'command'} eq 'post') {
      print <<EOM;
<input type=submit name=func value=accept>
<input type=submit name=func value=accept-archive>
<input type=submit name=func value=reject>
EOM
    }

  }

  print "</form>\n";
  select STDOUT;
} 

sub Mj::Format::who {
  my ($mj, $out, $err, $type, $request, $result) = @_;
  my $log = new Log::In 29, "$request->{'list'}";
  my ($cgiurl, $chunksize, $count, $fullclass, $i, $lastchange);
  my (@lines, $numbered, $remove, @time, $user);
  $cgiurl = $mj->{'sitedata'}{'config'}{'cgi_url'} . "mj_wwwadm";
  $remove = $request->{'list'} eq 'GLOBAL' ? "unregister" : "unsubscribe";
  select $out;

  my ($ok, $regexp, $tmpl) = @$result;
  if ($ok <= 0) {
    print "<p>Could not access $request->{'list'}:\n";
    return $ok;
  }
  print <<EOM;
<form action=$cgiurl method=POST>
<input type=submit name=func value=$remove>
<input type=hidden name=list value=$request->{'list'}>
<input type=hidden name=passw value=$request->{'password'}>
<input type=hidden name=st value=$st>
<br>To remove addresses, choose one or more 
addresses from the list below, then press the <b>$remove</b> button.
<table>
EOM

  # We know we succeeded
  $count = 0;
  $chunksize = $mj->global_config_get($request->{'user'}, $request->{'password'}, 
                                      $request->{'auth'}, $request->{'interface'},
                                      "chunksize");
  return unless $chunksize;  
  $request->{'command'} = "who_chunk";
  
  while (1) {
    ($ok, @lines) = @{$mj->dispatch($request, $chunksize)};
    
    last unless $ok > 0;
    for $i (@lines) {
      next unless (ref ($i) eq 'HASH');
      if ($request->{'list'} ne 'GLOBAL') {
        $fullclass = $i->{'class'};
        $fullclass .= "-" . $i->{'classarg'} if ($i->{'classarg'});
        $fullclass .= "-" . $i->{'classarg2'} if ($i->{'classarg2'});
      }
      else {
        $i->{'lists'} =~ s/\002/ /g;
      }
      $user = Mj::Format::escape($i->{'fulladdr'});
      @time = localtime($i->{'changetime'});
      $lastchange = sprintf "%4d-%.2d-%.2d", $time[5]+1900, $time[4]+1, $time[3];

      $count++;
      print "<tr><td><input type=checkbox name=extra value=\"$i->{'stripaddr'}\">$user\n";
      print "<td>$lastchange\n";

      if ($request->{'list'} eq 'GLOBAL') {
        print "<td>$i->{'lists'}\n";
      }
      else {
        print "<td>$i->{'flags'}<td>$fullclass\n";
      }
        
      if ($request->{'mode'} =~ /bounces/ && exists $i->{'bouncestats'}) {
        print "<tr><td cols=4>Bounces in the past week: $i->{'bouncestats'}->{'week'}\n"
          if $i->{'bouncestats'}->{'week'};
        print "<tr><td cols=4>Bounces in the past month: $i->{'bouncestats'}->{'month'}\n"
          if $i->{'bouncestats'}->{'month'};
        $numbered = join " ", sort {$a <=> $b} keys %{$i->{'bouncedata'}{'M'}};
        print "<tr><td cols=4>Message numbers: $numbered\n"
          if $numbered;
       
      }
    }
  }
  $request->{'command'} = "who_done";
  $mj->dispatch($request);

  print "</table>\n";
  if (exists $request->{'mlist'} and (ref $request->{'mlist'} eq 'ARRAY')) {
    for (@{$request->{'mlist'}}) {
      print "<input type=hidden name=mlist value=$_>\n"
        unless ($request->{'list'} eq $_);
    }
  }
  print "</form>\n";
  select STDOUT;
}

sub usage {
  my ($mj) = shift;
  my $site  = $mj->_global_config_get('site_name');
  my $serveraddr = $mj->_global_config_get('whoami');
  my $serveradmin = $mj->_global_config_get('whoami_owner');

  print <<EOM;
Welcome to the Majordomo 2 administrative interface at $site!
To return to this introduction at any time, select
<b>about this service</b> from the menu above and press the 
<b>Issue Command</b> button.
<p>
At the top of this page is a command form that will allow you to issue 
commands to administrate the $list mailing list.
Some commands, like <b>lists-aux</b>, have a hyphen in their names.
The part that follows the hyphen is called the "command mode."
<p>
To learn more about a particular command, select <b>help</b> in 
the command menu, type the name of the command (without
the command mode) in the box immediately to the right,
and press the <b>Issue Command</b> button. You will
see a summary of how the command works.  
The same commands may be issued by sending electronic mail to
<a href="mailto:$serveraddr">$serveraddr</a>.
<p>
Choose a command from the command menu.
Since most commands require a password, type the password
for the $list mailing list into the <b>Password:</b> box.
To administer a different list,
type its name into the <b>Mailing List:</b> box.
If additional information is needed to issue
a command, type that information into the box
immediately to the right of the command menu.
Finally, press the "Issue Command" button.
<p>
If the <b>Show Pending Requests</b>
button is pressed, the pending requests for your list will
appear at the bottom of the page.  There are many kinds of
requests:  a subscription or set request that
a subscriber has not yet confirmed; a request
for help that was sent to the mailing list by mistake; or
a posted message that is held for your approval because a
header line was too long, for example.
<p>
If there are requests, you will see a form
like this:
<form method=POST action="/cgi-bin/test-cgi">
<input type=submit name=func value="tokeninfo-full">
<input type=submit name=func value="tokeninfo">
<input type=submit name=func value="accept">
<input type=submit name=func value="accept-archive">
<input type=submit name=func value="reject">
<input type=hidden name=st value=>
<input type=hidden name=list value=$list>
<input type=hidden name=passw value=yourpassword>
<br>
Choose one or more requests from the following list,
then press one of the buttons.
<table>
<tr>
<td><input type=checkbox name=extra value=13D7-C445-6A37>13D7-C445-6A37
<td>O
<td>post (5 kB)
<td>05-12 20:27:46 
<td>Someone You Know &lt;someone\@example.com&gt;
<tr>
<td><input type=checkbox name=extra value=8E49-E388-BADC>8E49-E388-BADC
<td>S
<td>subscribe
<td>05-13 10:27:46 
<td>Someone New &lt;unknown\@example.org&gt;
</table>
<input type=submit name=func value="tokeninfo-full">
<input type=submit name=func value="tokeninfo">
<input type=submit name=func value="accept">
<input type=submit name=func value="accept-archive">
<input type=submit name=func value="reject">
</form>

<ul>
<li>The first column has a checkbox and
the "token identifier," which is unique to that request.  
Checkboxes allow more than one request to be handled at once.

<li>The second column shows the name of the mailing list.

<li>Generally, <b>subscribe</b> and <b>set</b> requests need 
to be confirmed by the subscribers themselves, but any other request 
should be handled by the list owners.  This is indicated 
in the third column by an <b>O</b> (the owners must approve) 
or an <b>S</b> (the subscriber must approve). 

<li>The fourth column shows the type of request.

<li>The remaining columns contain the date of
the request and the e-mail address of the person who made it.
</ul>

<p>
There are five buttons available to deal with pending requests.
<ol>
<li>The <b>tokeninfo-full</b> button will show the headers of the message
that caused the request, plus the message itself if the request
is a <b>post</b>.
<li>The <b>tokeninfo</b> button will show the headers of the message
and a summary of the request.
<li>The <b>accept</b> button will approve the request.
<li>The <b>accept-archive</b> button will approve the request, but
if it is a <b>post</b>, the message will be stored in
the archive but not distributed to the subscribers.
<li>The <b>reject</b> button will deny the request.
</ol>
<p>
If there are no pending requests, you will see the following message:
<pre>
There are no pending requests for $list.
</pre>
<p>
Requests will eventually expire unless someone handles them.
By default, the lifetime of a request is one week.
<p>
If you have questions about this interface, contact your
site administrator at 
<a href="mailto:$serveradmin">$serveradmin</a>.
</body>
</html>
EOM
}
=head1 COPYRIGHT

Copyright (c) 2000 Jason Tibbitts for The Majordomo Development
Group.  All rights reserved.

This program is free software; you can redistribute it and/or modify it
under the terms of the license detailed in the LICENSE file of the
Majordomo2 distribution.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the Majordomo2 LICENSE file for more
detailed information.

=cut

#^L
### Local Variables: ***
### cperl-indent-level:2 ***
### End: ***


