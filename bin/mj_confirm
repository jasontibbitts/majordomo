#!/usr/local/bin/perl-latest -wT
BEGIN {
  $::LIBDIR = 'unset';
  $::LISTDIR= 'unset';
  $::TMPDIR = 'unset';
  $::LOCKDIR= "blah";
  $::UMASK  = "007";
  $SIG{__WARN__} = sub {print STDERR "--== $_[0]"};

  # Redirect standard error output.
  if (! -t STDERR) {
    open (STDERR, ">>$::TMPDIR/mj_confirm.debug");
  }
}

=head1 NAME

mj_confirm - simple web-based token acceptor

=head1 SYNOPSIS

Place a link in cgi-bin and configure Majordomo with the proper URL.

=head1 DESCRIPTION

When issuing tokens, Majordomo can provide the user with a URL to
visit to accept the token easily.  This script sits at that URL and
receives tokens to accept or deny.  If no token or action is provided, 
instructions will be displayed. 

=cut
use lib "$::LIBDIR";
use strict;
use CGI;
use Majordomo;
use Mj::Format;
use Mj::Log;

my (%commands, $action, $cgi, $cgidata, $cgiurl, $domain, $func, 
    $i, $mess, $mj, $mode, $ok, $ptoken, $result, $request, 
    $sess, $str, $subs, $tmp, $token, $user);

$ENV{'PATH'} = "/bin:/usr/bin:/usr/ucb";

umask oct($::UMASK);

# Set up the log
$::log = new Mj::Log;
$::log->add
  (
   method      => 'handle',
   id          => 'wwwconfirm',
   handle      => \*STDERR,
   level       => 500,
   subsystem   => 'mail',
   log_entries => 1,
   log_exits   => 1,
   log_args    => 1,
  );

$::log->in(20, undef, "info", "Majordomo wwwconfirm client - ".scalar(localtime));
$::log->startup_time();

#----- Which commands are supported ?  -----#
# First value:  Should the result be preformatted?
%commands = (  
               'accept'    => [1],
               'reject'    => [1],
               'tokeninfo' => [0],
               'welcome'   => [0],
            );

# Start up the page and parse the URL
$cgi = new CGI;
print $cgi->header;
$cgiurl = $cgi->script_name . $cgi->path_info;

$ptoken = $cgi->param('t');
$action = $cgi->param('a') || 'welcome';
$domain = $cgi->param('d');
unless ($domain) {
  ($domain) = Majordomo::domains($::LISTDIR);
}
$domain =~ /([a-zA-Z0-9\.\-]+)/; $domain = $1;


#----- Make the Majordomo object -----#
$mj = new Majordomo $::LISTDIR, $domain;
&surrender($mj) unless (ref $mj);

#----- Generate the session information. -----#
for $i ('REMOTE_ADDR','REMOTE_PORT', 'PATH_INFO') {
  $sess .= "$i = $ENV{$i}\n" if defined $ENV{$i};
}
$sess .= scalar(localtime(time)) . "\n";

#----- Connect to the server -----#
($ok, $mess) = $mj->connect('wwwconfirm', $sess);
&surrender($mess) unless $ok; 

#----- Collect some useful substitution variables -----#
$user = "z$ENV{'REMOTE_ADDR'}\@example.com";
$cgidata = sprintf 'domain=%s&user=%s', $domain, $user;

$token = $mj->t_recognize($ptoken) || "";

$subs = { $mj->standard_subs('GLOBAL'),
          'CGIDATA'   => $cgidata,
          'CGIURL'    => $cgiurl,
          'COMMAND'   => $action,
          'PASSWORD'  => '',
          'TOKEN'     => $token,
          'USER'      => $user,
        };


#----- Print the header -----#
$tmp = $mj->format_get_string('wwwconfirm', 'head');
$str = $mj->substitute_vars_format($tmp, $subs);
print "$str\n";

#----- Determine what service was requested -----#
# Extract "mode" from command name
if ($action =~ /([^\s=-]+)[=-](.*)/) {
  $func = $1;
  $mode = $2;
}
else { 
  $action =~ /(.*)/; $action = $1;
  $func = $action;
  $mode = '';
}

unless (exists $commands{$func}) {
  &usage($mj, $subs, "$action is an unsupported command.");
}

if ($func eq 'welcome') {
  &usage($mj, $subs, '');
}

$request = {
  'cgiurl'    => $cgiurl,
  'command'   => $func,
  'list'      => 'GLOBAL',
  'mode'      => $mode,
  'password'  => '',
  'token'     => $token,
  'tokens'    => [$token],
  'user'      => $user,
};

no strict 'refs';
$result = $mj->dispatch($request); 
&usage($mj, $subs, "Unable to obtain result from Majordomo.") unless $result;
print "<pre><small>\n" if ($commands{$func}->[0]);
&{"Mj::Format::$func"}($mj, \*STDOUT, \*STDOUT, 'wwwconfirm', $request, $result);
print "</small></pre>\n" if ($commands{$func}->[0]);;

$tmp = $mj->format_get_string('wwwconfirm', 'foot');
$str = $mj->substitute_vars_format($tmp, $subs);
print STDOUT "$str\n";

$::log->out;
exit 0;

#----- Subroutines -----#

sub usage {
  my ($mj, $subs, $message) = @_;
  my ($str, $tmp);

  $subs->{'ERROR'} = $message;
  $::log->message(50, "info", $message) if $message;

  $tmp = $mj->format_get_string('wwwconfirm', 'welcome');
  $str = $mj->substitute_vars_format($tmp, $subs);
  print STDOUT "$str\n";

  $tmp = $mj->format_get_string('wwwconfirm', 'foot');
  $str = $mj->substitute_vars_format($tmp, $subs);
  print STDOUT "$str\n";
  
  exit 1;
}

sub surrender {
  my ($message) = shift;
  $::log->message(50, "info", $message) if $message;

  print <<EOM;
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
"http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head>
<title>Majordomo 2 WWW for List Owners: Error</title>
</head>
<body>
<h2>Majordomo Error</h2>
$message
EOM

  if (defined $subs and exists $subs->{'MJOWNER'}) {
    print <<EOM;
Please contact 
<a href="mailto:$subs->{'MJOWNER'}">$subs->{'MJOWNER'}</a>
 for assistance.
EOM
  }

print "</body></html>\n";

  exit 0;
}


=head1 COPYRIGHT

Copyright (c) 1997, 1998 Jason Tibbitts for The Majordomo Development
Group.  All rights reserved.

This program is free software; you can redistribute it and/or modify it
under the terms of the license detailed in the LICENSE file of the
Majordomo2 distribution.

his program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the Majordomo2 LICENSE file for more
detailed information.

=cut

#
### Local Variables: ***
### cperl-indent-level:2 ***
### End: ***

