#!/usr/bin/perl -wT
BEGIN {
  $::LIBDIR = "/home/tibbs/mj/2.0/blib/lib";
  $::LISTDIR= "/home/tibbs/mj/2.0-lists";
  $::TMPDIR = "/tmp";
  $::LOCKDIR= "blah";
  $::UID    = "baduid";
  $::GID    = "badgid";
  $::UMASK  = "007";
  $::TIMEOUT= 30;

  $SIG{__WARN__} = sub {print STDERR "--== $_[0]"};

  # Redirect standard error output.
  if (! -t STDERR) {
    open (STDERR, ">>$::TMPDIR/mj_queuerun.debug") or
      die "Can't redirect debug output to $::TMPDIR/mj_queuerun.debug: $!";
    select((select(STDERR), $| = 1)[0]);
  }

  # Croak if install was botched
  die("Not running as UID $::UID") unless $> == $::UID;
  die("Not running as GID $::GID") unless $) == $::GID;

  # Quiet warning
  $::LOCKDIR;
}

=head1 NAME

mj_queuerun - process outstanding queue entries.

=head1 DESCRIPTION

The Majordomo queue runner program, mj_queuerun, examines a series of
queue directories for messages.  Each message that it finds will be
processed unless another queue runner process is already processing that
message.  When a queue directory has more than one messages, the
messages will be processed in a random order.  

A sequence counter is kept for each message in a queue directory.  If a
technical problem causes a queue runner to abort, a particular message
may be examined more than once.  If a message cannot be processed after
three tries, a special emergency log will be kept for the fourth try.
If the message cannot be processed on the fourth try, it will be
discarded.

After all of the messages have been processed, the queue runner will
wait for a message from the queue server program, mj_queueserv.  If a
message is received, the queue runner will examine each of the queue
directories again.  Otherwise, the queue runner will exit.

=cut
sub out { syswrite(STDOUT, $_[0], length($_[0]));}
sub in  { sysread(STDIN, $_, 1024); $_};

use lib "$::LIBDIR";
use Getopt::Std;
use strict;
my (%opts, $ein, $eout, $head, $int, $line, $mime_parser, $mj, $nfound, 
    $ok, $request_ans, $rin, $rout, $win, $wout);

umask oct($::UMASK);

$ENV{'PATH'} = "/bin:/usr/bin:/usr/ucb"; # Needed for Syslog to get hostname.

# Parse the command line arguments.
# -t - specify directory containing domains (arg)
# -v - specify debug verbosity (arg), default 50.

getopts('t:v:', \%opts);

# We must untaint the top level dir and the domain because they are used to
# generate filenames; it's safe since they were supplied by the site owner.
$opts{t} ||= $::LISTDIR;
$opts{t} =~ /(.*)/;
$opts{t} = $1;
$opts{v} ||= 0;

# Pull in the logging module
eval 'use Mj::Log';

# Open a log
$::log = new Mj::Log;
$::log->add
  (
   # If we can pront the messages somewhere, print them, else we dump them
   # to syslog.
#   method      => (-t STDERR)?'handle':'syslog',
   method      => 'handle',
   handle      => \*STDERR,
   id          => 'mjqr',
   level       => ($opts{v} =~ /^(\d+)$/)[0] || 50,
   subsystem   => 'mail',
   log_exits   => 1,
   log_entries => 1,
   log_args    => 1,
  );

$::log->in(20, undef, "info", "Majordomo queue runner - ".scalar(localtime));
$::log->startup_time();

# Now pull in the rest of the modules we need.  This is delayed until after
# compile time in order to make qmail checking fast if we were called but
# we do not handle the address.
$::log->in(21, undef, 'info', 'Loading modules');
eval '
  use Fcntl ":flock";
  use Majordomo;
  use Mj::Parser;
  use Mj::MIMEParser;
  use Mj::CommandProps qw(:command);
  use Symbol;
  use Mail::Header;
#  use Devel::Symdump;
';
$::log->out;

# Now, we're ready.
out('Starting');

# Loop forever
while (1) {
  # Select on standard input, which is our signal to go.
  $rin = $win = $ein = ''; vec($rin,fileno(STDIN),1) = 1; $ein = $rin | $win;
  $nfound = select($rout=$rin, $wout=$win, $eout=$ein, $::TIMEOUT);
  unless ($nfound) {
    $::log->out('Timed out');
    last;
  }

  $line = in();
  unless (defined $line && length $line) {
    $::log->message(50, 'info', "Read undef or empty line; server must have died.");
    last;
  }
  if ($line =~ /(Ping \d+)$/) {
    # The server is pinging us to see if we're alive.  Return the ping and
    # wait again.  This lets the server know that we're just sitting here
    # and to refresh the timeout.  We chop off all but the last bit because
    # the server may have pinged us multiple times.
    out($1);
    next;
  }
  out('Running queue');
  run_queue();
}
out('Exiting');
exit;

sub run_queue {
  my $log = new Log::In 25, 'Running queue';

  my(%req, @args, @domains, @fhstatus, @functions, @msgs, @pri1, @pri2,
     @status, $arg, $debug1, $debug2, $dom, $emerg_log, $end, $file, $func,
     $key, $list, $mj, $msg, $ok, $pri1, $pri2, $start, $statfile,
     $trycount, $val);

  # Grab the domain priorities from the queue, high priorities first
  opendir(PRI1, "$::LISTDIR/QUEUE") ||
    $::log->abort("Can't opendir $::LISTDIR/QUEUE: $!");
  @pri1 = sort {$b <=> $a} grep { $_ !~ /^\./ } readdir PRI1;
  closedir PRI1;

  # Loop over domain priorities
  for $pri1 (@pri1) {
    $pri1 =~ /(.*)/; $pri1 = $1;

    # Grab the domains from the queue
    opendir(DOMS, "$::LISTDIR/QUEUE/$pri1") ||
      $::log->abort("Can't opendir $::LISTDIR/QUEUE/$pri1: $!");
    @domains = grep { $_ !~ /^\./ } readdir DOMS;
    closedir DOMS;

    # Randomize domain list to avoid starvation
    &shuffle(\@domains);

    # Loop over domains
  DOM:
    for $dom (@domains) {
      # Untaint $dom; this is safe because only we are able to write to that
      # directory.
      $dom =~ /(.*)/; $dom = $1;

#      $start = Devel::Symdump->rnew();

      # Grab list priorities from the queue, high priorities first
      opendir(PRI2, "$::LISTDIR/QUEUE/$pri1/$dom") ||
	$::log->abort("Can't opendir $::LISTDIR/QUEUE/$pri1/$dom: $!");
      @pri2 = sort {$b <=> $a} grep { $_ !~ /^\./ } readdir PRI2;
      closedir PRI2;

      # Loop over list priorities
      for $pri2 (@pri2) {
        $pri2 =~ /(.*)/; $pri2 = $1;

        # Grab the functions from the queue
        opendir(FUNCS, "$::LISTDIR/QUEUE/$pri1/$dom/$pri2") ||
          $::log->abort("Can't opendir $::LISTDIR/QUEUE/$pri1/$dom/$pri2: $!");
        @functions = grep { $_ !~ /^\./ } readdir FUNCS;
        closedir FUNCS;

        # Randomize function list to avoid starvation
        &shuffle(\@functions);

        # Loop over functions
          FUNC:
        for $func (@functions) {
          # Untaint $func; this is safe because only we are able to write to
          # that directory.
          $func =~ /(.*)/; $func = $1;

          # Grab the queue files from the queue
          opendir(QDIR, "$::LISTDIR/QUEUE/$pri1/$dom/$pri2/$func") ||
            $::log->abort("Can't opendir $::LISTDIR/QUEUE/$pri1/$dom/$pri2/$func: $!");
          # Read and randomly reorder the messages
          @msgs = readdir QDIR;
          closedir QDIR;
          &shuffle(\@msgs);

          # Loop over queue files
        MSG:
          for $msg (@msgs) {
            next MSG if $msg =~ /^\./;

            # Untaint $msg; this is safe because only we are able to write
            # stuff in that directory
            $msg =~ /(.*)/; $msg = $1;
            $file     = "$::LISTDIR/QUEUE/$pri1/$dom/$pri2/$func/$msg";
	    $statfile = "$::LISTDIR/QUEUE/$pri1/$dom/$pri2/$func/.$msg";
	    $emerg_log = '';
            unless (open(MSG, "+< $file")) {
              # Some other runner may have deleted the file while we were
              # iterating through the directory.  That's OK; note it and go
              # on.
              $log->message(20, 'info', "Can't open queue file $file: $!");
              next MSG;
            }

            # Lock a file, non-blocking; next if we didn't get it.
            $ok = flock(MSG, &LOCK_EX|&LOCK_NB);
            unless ($ok) {
              close MSG;
              next MSG;
            }
            @fhstatus = stat MSG;
            @status = stat $file;
            # Make sure file has nonzero size to avoid a race with mj_enqueue
            # Make sure no modification has occurred to the file
            # between open() and flock().
            unless ($status[7] && (@status eq @fhstatus) && (-r $file)) {
              close MSG;
              next MSG;
            }

	    # OK, we own the file.  Now manipulate the status file.
	    # Increase the try count therein or create the file with a try
	    # count of one.
	    if (-f $statfile) {
	      open(STAT, "<$statfile");
	      $trycount = <STAT>; chomp $trycount;
	      close STAT;
	    }
	    else {
	      $trycount = 0;
	    }
	    $trycount++;
	    open(STAT, ">$statfile");
	    print STAT "$trycount\n";
	    close STAT;

	    # Now do special things depending on the try count.  On the
	    # first and second tries, process normally.  On the third try,
	    # crank up the debugging level and log to a special "emergency
	    # log".  After the third try, delete the queue file and pretend
	    # we never saw it.
	    if ($trycount > 3) {
	      unlink $statfile; unlink $file;
	      close MSG;
	      next MSG;
	    }
	    if ($trycount == 3) {
	      $emerg_log = "emergency-$msg";
	      debug_to($emerg_log);
	      # XXX If logging levels are ever refined, make sure this logs _everything_.
	      $::log->set_level(9999);
	      $::log->message(0, 'info', "Emergency log created at ".localtime().".");
	      $::log->message(0, 'info', "Tried $trycount times to process $file.");
	    }

            # OK, have something to process.  Lazily create a Majordomo object
            # for the domain we're processing.
            unless (defined $mj) {
              $::mj = new Majordomo $opts{t}, $dom; $mj = $::mj;
              unless (ref $::mj) {
                $::log->abort("Cannot create Majordomo object: $::mj");
              }
              $debug1 = $mj->global_config_get(undef, undef, 'debug') || 0;
              if ($opts{'v'} > $debug1) {$debug1 = $opts{'v'}};
              $::log->set_level($debug1) unless $emerg_log;
            }

            $::log->message(10, 'info', 
              "Processing $pri1/$dom/$pri2/$func/$msg at " . time);

            # If we're at the Majordom address, just parse commands
            if ($func eq 'majordomo') {
              $log->message(50, 'info', 'Processing commands');
              debug_to($emerg_log || 'majord');
              unless (parse_commands($mj, '', '', 'email')) {
                $log->message(50, 'info', 'Parsing failed; forwarding');
              }
              unlink $statfile; unlink $file;
              debug_to('queuerun');
              close MSG;
              next MSG;
            }

            # Messages to the Majordomo owner address don't have a list on
            # the end
            if ($func eq 'owner' && $msg =~ /^\w\w\w-\d+$/) {
              $log->message(50, 'info', 'Forwarding to majordomo-owner');
              debug_to($emerg_log || 'owner');
              forward_to_owner($mj, 'GLOBAL');
              debug_to('queuerun');
              unlink $statfile; unlink $file;
              close MSG;
              next MSG;
            }

            # Else we have something that is associated with a list;
            # extract the list name and argument list
            $msg =~ /^\w\w\w-\d+-([^,]*)(,(.*))?$/;
            $list = $1;
            $arg  = $3 || '';

	    # Split arglist on commas
	    @args = split(',', $arg);

	    # First item goes in $arg
	    $arg = shift @args if @args;

	    # Rest of arguments are split on '=', turned into a hash %req
	    while (@args) {
	      ($key, $val) = split('=', shift @args, 2);
	      $req{$key} = $val;
	    }

            # Now set the logging level to that of the list.
            ($debug2) = $mj->list_config_get(undef, undef, $list, 'MAIN', 'debug');
	    $debug2 ||= 0;
            if ($debug1 > $debug2) {$debug2 = $debug1};
            $::log->set_level($debug2) unless $emerg_log;

            # Perform the appropriate function
            # If at list address, resend.
            if ($func eq 'list' || $func eq 'resend') {
              $log->message(50, 'info', 'Posting message');
              debug_to($emerg_log || 'resend');
              resend($mj, $list, $file, $arg);
              debug_to('queuerun');
            }

            # if at -request pull out global 'request_answer' variable and
            # figure out what to do.  Note that if $arg is set to something
            # (indicating that we were passed an explicit command) then we
            # always process that command.
            elsif ($func eq 'request') {
              $request_ans = 
                $mj->global_config_get(undef, undef, 'request_answer')
                  || 'response';
              if ($request_ans eq 'majordomo' || $arg) {
                $log->message(50, 'info', 'Processing commands');
                debug_to($emerg_log || 'majord');
                if (length($arg)) {
                  $int = 'email-command'; 
                }
                else {
                  $int = 'email-request';
                }
                parse_commands($mj, $list, $arg, $int, \%req);
                debug_to('queuerun');
              }
              elsif ($request_ans eq 'owner') {
                $log->message(50, 'info', 'Forwarding to owner');
                debug_to($emerg_log || 'owner');
                forward_to_owner($mj, $list);
                debug_to('queuerun');
              }
              else {
                $log->message(50, 'info', 'Responding with file');
                debug_to($emerg_log || 'request');
                respond_with_file($mj, $list);
                debug_to('queuerun');
              }
            }

            # if at -owner look for bounces and forward everything else to the
            # owner
            elsif ($func eq 'owner') {
              # forward to owner; if -l is present, forward to that list else assume
              # we're majordomo-owner.
              $log->message(50, 'info', 'Forwarding to owner');
              debug_to($emerg_log || 'owner');
              forward_to_owner($mj, $list || 'GLOBAL', $arg);
              debug_to('queuerun');
            }

            # Remove the file, but keep in mind that it may have already
            # been moved to some other location (if it was spooled, for
            # instance).
            if (-s $file) {
              unlink $file;
            }
            if (-s $statfile) {
              unlink $statfile;
            }
            close MSG;
            $::log->set_level($debug1);
          } # $msg
        } # $func
      } # $pri2
      # undef Majordomo object
      if ($mj) {
        $::log->message(50, "info", "-----Calling destructors-----");
        undef $mj;
        undef $::mj;
      }
#      $end = Devel::Symdump->rnew();
#      warn($start->diff($end));
    } # $dom
  } # $pri1
} # sub run_queue

# Forward the message to the list owner.  Call owner_start, owner_chunk,
# owner_done passing in all of the message.
sub forward_to_owner {
  my ($mj, $list, $moderator) = @_;
  my ($from, $ok, $mess, $sess, $request);

  # If the message was sent to the -moderator alias, $moderator will be 'M'
  $moderator ||= '';

  ($sess, $from) = connect_no_parse($mj, 'owner');
  return unless $sess;

  # Some MTAs hand the message to us with the mbox separator prepended.
  # Sending this on as part of the headers can hose some MTAs, so we strip
  # it.  The regexp doesn't harm the body $sess contains only the headers.
  $sess =~ s/^From .*?\r?\n//;
  $request = {
    'command'   => 'owner_start',
    'list'      => $list,
    'mode'      => $moderator,
    'password'  => '',
    'user'      => $from,
  };
  ($ok, $mess) = @{$mj->dispatch($request)};
  return unless $ok;

  $request->{'command'} = 'owner_chunk';
  $_ = $sess;
  while (1) {
    last unless defined $_;
    ($ok, $mess) = @{$mj->dispatch($request, $_)};
    return unless $ok;
    $_ = <MSG>;
  }
  $request->{'command'} = 'owner_done';
  ($ok, $mess) = @{$mj->dispatch($request)};
  return unless $ok;
  1;
}

# Resend a message; call post but instead of doing the copy operation, just
# use the spooled message.  #XXX Beware of who gets to unlink it.
sub resend {
  my ($mj, $list, $file, $sublist) = @_;
  my ($from, $ok, $mess, $request, $sess);

  ($sess, $from) = connect_no_parse($mj, 'resend');
  return unless $sess;

  # Some MTAs hand the message to us with the mbox separator prepended.
  # Sending this on as part of the headers can hose some MTAs, so we strip
  # it.  The regexp doesn't harm the body as $sess contains only the
  # headers.
  $sess =~ s/^From .*?\r?\n//;

  $sublist ||= '';
  $request = {
    'command'   => 'post',
    'file'      => $file,
    'list'      => $list,
    'mode'      => '',
    'password'  => '',
    'sublist'   => $sublist,
    'user'      => $from,
  };

  ($ok, $mess) = @{$mj->dispatch($request)};
  return unless $ok;
  1;
}

# Just call the request_response method.
sub respond_with_file {
  my ($mj, $list) = @_;
  my ($request, $user);
  ($list, undef) = split ',', $list;

  (undef, undef, $user) = connect_and_parse($mj, 'request');
  $request = {
    'command'   => 'request_response',
    'list'      => $list,
    'mode'      => '',
    'password'  => '',
    'user'      => $user,
  };

  $mj->dispatch($request);
  1;
}

# These two functions exist because there are times when we can avoid
# loading the MIME modules in the client.  To connect, all we need is the
# header of the incoming message.  If we do no MIME parsing here (such as
# when we're forwarding to the owner or resending) we can just pull in
# everything until the first blank line.

# This pulls in the header, connects to the given majordomo object, and
# returns the header _including_ the first blank line.  Standard input will
# contain the remainder of the message.
sub connect_no_parse {
  my ($mj, $int) = @_;
  my (@hdr, $err, $from, $head, $i, $id, $sess);
  $from = 'unknown@anonymous';

  while (defined($i = <MSG>)) {
    if ($i =~ /^\r?\n/) {
      @hdr = split /\n/, $sess;
      $head = new Mail::Header(\@hdr);
      $from = $head->get('from') ||
        $head->get('apparently-from') || 'unknown@anonymous';
      chomp $from;
      ($id, $err) = $mj->connect($int, $sess, $from);
      unless (defined $id) {
	$::log->complain("Error when connecting: $err");
	return;
      }
      $sess .= $i;
      last;
    }
    $sess .= $i;
  }

  $from =~ /(.*)/; $from = $1;
  ($sess, $from);
}

# This parses the message and connects to the provided Majordomo object.
# The MIME entity, unfolded header and user/reply address (stripped and
# unstripped) will be returned.
sub connect_and_parse {
  my ($mj, $int) = @_;
  my($entity, $head, $mime_parser, $ok, $user, $subject, $suser);

  $::log->in(85, undef, "info", "Setting MIME parser properties");
  $mime_parser = new Mj::MIMEParser;
  $mime_parser->output_to_core($mj->global_config_get(undef, undef,
                              "max_in_core"));
  $mime_parser->output_dir($::TMPDIR);
  $mime_parser->output_prefix("mje");
  $::log->out;

  # One line does all of the parsing!
  $::log->in(80, undef, "info", "Taking apart the incoming message");
  $entity = $mime_parser->read(\*MSG);
  $::log->out;

  return unless $entity;

  # Get the header.
  $::log->in(80, undef, "info", "Parsing the header");
  $head = $entity->head;
  $head->unfold;
  $::log->out;

  $user = $head->get('from') || $head->get('apparently-from');
  chomp $user;

  unless ($user) {
    $subject = $head->get('subject') || "no subject";
    chomp $subject;
    $head->replace('Subject', 
                   "Majordomo error: no address found (was: $subject)");
    $user = $mj->global_config_get(undef, undef, 'whoami_owner');
    $mj->mail_entity('', $entity, $user) if ($user);
    $entity->purge;
    return;
  }

  # Connect; gives back the stripped user
  ($ok, $suser) = $mj->connect($int, $entity->head->as_string, $user);

  # Connect can now fail: 0: try again later, undef: bomb with error, > 0:
  # connection ID

  # If it failed, just clean up and return.  
  unless (defined($ok)) {
    $::log->complain("Error connecting: $suser");
    $subject = $head->get('subject') || "no subject";
    chomp $subject;
    $suser =~ s/\n/ /g;
    $suser = substr $suser, 0, 100;
    $head->replace('Subject', 
                   "Majordomo error: $suser (was: $subject)");
    $user = $mj->global_config_get(undef, undef, 'whoami_owner');
    $mj->mail_entity('', $entity, $user) if ($user);
    $entity->purge;
    return;
  }

  ($entity, $head, $suser, $user);
}

# Parse commands in the subject here; we do this early to get the debug log
# going.  XXX Support ACCEPT, REJECT, LIST and PASS in the subject, too.  The
# first two for quick confirmation token processing; the latter two for
# bypassing failed "access" checks.
use Date::Format;
sub parse_commands {
  my ($mj, $deflist, $command, $int, $req) = @_;
  my (@entities, @events, $args, $commands, $data, $debug_file, $debug_log,
      $debug_reply, $entity, $fh, $file, $head, $i, $list, $mode, $ok,
      $pass, $repl, $request, $sender, $server, $sub_addin, $subject,
      $sub_start, $time, $top, $token, $user, $uuser);

  ($entity, $head, $user, $uuser) = connect_and_parse($mj, $int);
  return unless $entity;

  $subject = $head->get('subject') || "";

  # Look for a possible token
  $token = $mj->t_recognize($subject);

  if ($subject =~ s/DEBUG\s*(\d+)\s*//) {
    $debug_reply = $1;
    $debug_file  = "$::TMPDIR/mje.$$.debug";
    $debug_log =
      $::log->add(method      => 'file',
          filename    => $debug_file,
          id          => 'mje',
          level       => $debug_reply,
          subsystem   => 'mail',
          log_entries => 1,
          log_exits   => 1,
          log_args    => 1,
         );
  }

  # Extract a password from an Approved: header
  $pass = $head->get('approved') || '';
  $pass =~ s/^\s*//; $pass =~ s/\s*$//;

  $::log->message(35, "info", "Message from $user.");

  # Need to bail if we're talking to ourselves, either here (it's convenient)
  # or when checking access.

  if ($mj->global_config_get(undef, undef, 'return_subject') &&
      defined($head->get('subject')) && $head->get('subject') =~ /\S/)
    {
      $sub_addin = ': ' . (substr($head->get('subject'), 0, 40));
      chomp $sub_addin;
    }
  else {
    $sub_addin = '';
  }
  $sub_start = 'Majordomo results';

  # -subscribe and -unsubscribe aliases have the command in
  # the queue file name.  The message body is not parsed.
  ($command, $mode) = split(/-/, $command, 2) if defined($command);
  $mode = '' unless defined $mode;

  if (defined $command and command_legal($command)) {
    # Iterated or aliased commands are not yet considered.
    $request = {
		'command'   => $command,
		'list'      => $deflist,
		'mode'      => $mode,
		'password'  => $pass,
		'user'      => $uuser,
		%{$req},
	       };
    $file = &Majordomo::tempname();
    $fh = gensym();
    if (open ($fh, ">$file")) {
      call_format($command,
		  $mj, $fh, $fh, 'text', $request,
		  $mj->dispatch($request));
      close $fh;
    }
    else {
      # XXX The command may or may not have been completed.
      return;
    }
    push @entities, build MIME::Entity
      (
       'Encoding'    => '8bit',
       'Path'        => $file,
       '-To'         => $uuser,
      );
  }
  else {
    ($commands, @entities) =
      Mj::Parser::parse_entity
	  ($mj,
	   tmpdir     => $::TMPDIR,
	   entity     => $entity,
	   reply_to   => $uuser,
	   deflist    => $deflist,
	   token      => $token,
	   password   => $pass,
	  );

    # If the number of commands processed is 0, this could indicate
    # an autoresponder mail loop.  Record the sender's address in the 
    # parser database.  If more than three failures have occurred 
    # in the last hour, forward the reply to the domain owner instead
    # of returning it to the user.
    unless ($commands) {
      $time = time;
      $data = $mj->record_parser_data($user, $time, 'none', 0);
      if ($data) {
        @events = split " ", $data;
        $ok = 0;
        for $i (@events) {
          if ($i =~ /^(\d+)/) {
            if ($1 + 3600 > $time) {
              $ok++;
            }
          }
        }
        if ($ok > 3) {
          $sub_start = "Possible mail loop with $user";
          $user = $mj->global_config_get(undef, undef, 'whoami_owner');
        }
      }
    }
  }

  if ($debug_reply) {
    push @entities, build MIME::Entity
      (
       Encoding    => "8bit",
       Path        => $debug_file,
       Description => "Debugging information",
       Top         => 0,
      );
  }

  # Somehow we need to put together all of the entities and the debug info.
  # If we just have one entity, we add the necessary headers and send it
  # (this avoids attaching useless MIME crap).  If we have multiple
  # entities then we build a top and attach them all to it.
  if (@entities == 1) {
    $top = shift @entities;
    # XXX This is nasty, because MIME-Tools might start supporting a newer
    # MIME version at any time, but we have to do this until we get
    # MIME::Entity::make_top.
    $top->head->replace('MIME-Version', '1.0');
  }
  else {
    $top = build MIME::Entity
      (
       Type     => 'multipart/mixed',
       Encoding => '8bit',
      );

    for $i (@entities) {
      $top->add_part($i);
    }
  }

  $head = $top->head;
  $head->replace('to'     , $uuser);
  $head->replace('subject', "$sub_start$sub_addin");
  $head->replace('from'   , $mj->global_config_get(undef, undef, 'whoami_owner'));
  $head->replace('date'   , time2str("%a, %d %b %Y %T %z", time));
  $head->delete('reply-to');
  $repl = { $mj->standard_subs('GLOBAL') };
  for $i ($mj->global_config_get(undef, undef, 'message_headers')) {
    $i = $mj->substitute_vars_string($i, $repl);
    $head->add(undef, $i);
  }

  $sender = $mj->global_config_get(undef, undef, 'sender') || '';
  $server = $mj->global_config_get(undef, undef, 'whoami') || '';
  if ($sender eq $user) {
    # Avoid mail loops with empty sender.
    $sender = '';
  }

  $::log->delete($debug_log) if defined $debug_log;
  open(BLAH, ">$::TMPDIR/mje.$$.final") ||
    $::log->abort("Couldn't open final output file, $!");
  $top->print(\*BLAH);
  close BLAH;

  $mj->mail_message($sender, "$::TMPDIR/mje.$$.final", $user)
    unless (!$user or ($user eq $server));

  # Purge all tempfiles created by the entities.  XXX Ugh, need to clean up
  # the variable names.
  $entity->purge;
  $top->purge;
  unlink "$::TMPDIR/mje.$$.final";
  1;
}

sub debug_to {
  my $name = shift;

  $::log->message(0, 'info', "Switching logging to $name at ".localtime().'.');

  if (! -t STDERR) {
    close STDERR;
    open STDERR, ">>$::TMPDIR/mj_$name.debug" or
      die "Can't redirect debug output to $::TMPDIR/mj_$name.debug: $!";
    $::log->message(0, 'info', 'Switched logging at '.localtime().'.');
  }
}

sub call_format {
  my $command = shift;
  require Mj::Format;

  no strict 'refs';
  &{"Mj::Format::$command"}(@_);
}

sub shuffle {
  my $list = shift;
  my ($i, $j);

  return unless (ref $list eq 'ARRAY');

  $i = scalar (@$list) - 1;
  while ($i > 0) {
    $j = int rand ($i+1);
    next if $i == $j;
    @$list[$i,$j] = @$list[$j,$i];
    $i--;
  }
}

=head1 COPYRIGHT

Copyright (c) 1999 Jason Tibbitts for The Majordomo Development Group.  All
rights reserved.

This program is free software; you can redistribute it and/or modify it
under the terms of the license detailed in the LICENSE file of the
Majordomo2 distribution.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the Majordomo2 LICENSE file for more
detailed information.

=cut

#
### Local Variables: ***
### cperl-indent-level:2 ***
### End: ***
