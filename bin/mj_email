#!/usr/local/bin/perl-latest -wT
BEGIN {
  $::LIBDIR = "/home/tibbs/mj/2.0/blib/lib";
  $::LISTDIR= "/home/tibbs/mj/2.0-lists";
  $::TMPDIR = "/tmp";
  $::LOCKDIR= "blah";
  $::UID    = "baduid";
  $::GID    = "badgid";
  $::UMASK  = "007";
  $SIG{__WARN__} = sub {print STDERR "--== $_[0]"};

  # Redirect standard error output.
  if (! -t STDERR) {
    open (STDERR, ">>$::TMPDIR/mj_email.debug") or
    die "Can't redirect debug output to $::TMPDIR/mj_email.debug: $!";
  }

  # Croak if install was botched
  die("Not running as UID $::UID") unless $> == $::UID;
  die("Not running as GID $::GID") unless $) == $::GID;

  # Quiet warning
  $::LOCKDIR;
}

=head1 NAME

mj_email - email interface to Majordomo

=head1 DESCRIPTION

The Majordomo e-mail interface, mj_email, handles four different kinds
of message:

=over 4

=item list

The message is intended to be distributed to the subscribers 
of a mailing list.

=item majordomo

The message contains commands that will be processed 
by the Majordomo server.

=item owner

The message is intended to be sent to the owners
or moderators of a mailing list.

=item request

The purpose of the message will depend upon the GLOBAL I<request_answer>
configuration setting.  By default, commands in the message 
will be processed by the server.

=back

The mj_email command has been superseded by three programs that comprise
the Majordomo e-mail queueing system:  mj_enqueue, mj_queueserv, and
mj_queuerun.  The queueing system limits the number of programs that are
employed in message processing at any given time.  As a result, the
queueing system responds to periods of high activity more evenly.

=cut
use lib "$::LIBDIR";
use strict;
no strict "refs";
use Getopt::Long;
my (%opts, $entity, $head, $int, $list, $mime_parser, $mj, $ok, 
    $request_ans, $user, $uuser);

umask oct($::UMASK);

# Redirect standard error output; we do this again later, but this lets us
# catch option parsing errors.
if (! -t STDERR) {
  close STDERR;
  open (STDERR, ">>$::TMPDIR/mj_email.debug");
}

$ENV{'PATH'} = "/bin:/usr/bin:/usr/ucb"; # Needed for Syslog to get hostname.
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Parse the command line arguments.
# -c - specify command to be executed (arg)
# -d - specify domain to serve (arg)
# -l - specify deflist (arg)
# -m - run at main majordomo address; -l ignored.
# -o - run as owner answerer
# -q - run as request answerer; -l _required_.
# -r - run as resend; -l _required_.
# -t - specify directory containing domains (arg)
# -v - specify debug verbosity (arg), default 50.
# -x - specify auxiliary list (arg)
# -M - run as moderator answerer
# -Q - figure out addresses from $ENV{DEFAULT} (for qmail) or use
#      $ENV{LOCAL} if $ENV{DEFAULT} does not exist
#      argument is $whoami for this domain
# -S - when done, exit 99 instead of 0 (for qmail)
# -T - for qmail versions prior to 1.03, trim this string from $ENV{LOCAL}.
# -req - specifies argument for request structure (useful only with -c)

#getopts('c:d:l:mMoqQ:rSt:T:v:x:', \%opts);

Getopt::Long::Configure("bundling");
GetOptions(\%opts, 'c=s', 'd=s', 'l=s', 'm', 'M', 'o', 'q', 'Q=s', 'r',
	   'S', 't=s', 'T=s', 'v=i', 'x=s', 'req=s%');

# Deal with -Q option
do_qmail() if $opts{'Q'};

# Redirect standard error output again now that we've parsed the options
if (! -t STDERR) {
  close STDERR;
  if    ($opts{'m'}) {open (STDERR, ">>$::TMPDIR/mj_majord.debug")}
  elsif ($opts{'q'} or $opts{'c'}) {open (STDERR, ">>$::TMPDIR/mj_request.debug")}
  elsif ($opts{'r'} or $opts{'x'}) {open (STDERR, ">>$::TMPDIR/mj_resend.debug")}
  else                             {open (STDERR, ">>$::TMPDIR/mj_email.debug")}
}


# We must untaint the top level dir and the domain because they are used to
# generate filenames; it's safe since they were supplied by the site owner.

$opts{t} ||= $::LISTDIR;

for ('c', 'l', 't', 'x') {
  next unless exists $opts{$_};
  $opts{$_} =~ /(.*)/;
  $opts{$_} = $1;
}

$opts{d} =~ /([a-zA-Z0-9\-\.]+)/;
$opts{d} = $1;

$opts{v} ||= 0;

# Pull in the logging module
eval 'use Mj::Log';

# Open a log
$::log = new Mj::Log;
$::log->add
  (
   # If we can pront the messages somewhere, print them, else we dump them
   # to syslog.
#   method      => (-t STDERR)?'handle':'syslog',
   method      => 'handle',
   handle      => \*STDERR,
   id          => 'mje',
   level       => ($opts{v} =~ /^(\d+)$/)[0] || 50,
   subsystem   => 'mail',
   log_exits   => 1,
   log_entries => 1,
   log_args    => 1, 
  );

$::log->in(20, undef, "info", "Majordomo Email client - ".scalar(localtime));
$::log->startup_time();

# Now pull in the rest of the modules we need.  This is delayed until after
# compile time in order to make qmail checking fast if we were called but
# we do not handle the address.
$::log->in(21, undef, 'info', 'Loading modules');
eval '
  use Majordomo;
  use Mj::Parser;
  use Mj::MIMEParser;
  use Mj::CommandProps qw(:command);
  use Symbol;
  use Mail::Header;
';
$::log->out;

# Make a Majordomo object
$::mj = new Majordomo $opts{'t'}, $opts{'d'}; $mj = $::mj;

unless (ref $::mj) {
  $::log->abort("Cannot create Majordomo object: $::mj");
}

# if at list address, resend.
if ($opts{'r'} or $opts{'x'}) {
  $::log->abort("mj_email called with -r and without -l!")
    unless $opts{'l'};
  resend($mj, $opts{'l'}, $opts{'x'});
}
# if at -request (-q) pull out global 'request_answer' variable and figure
# out what to do.
elsif ($opts{'q'} or $opts{'c'}) {
  $::log->abort('mj_email called with -q or -c and without -l!')
    unless $opts{'l'};
  $request_ans = $mj->global_config_get(undef, undef, 'request_answer')
                   || 'response';
  if ($request_ans eq 'majordomo' || $opts{'c'}) {
    if ($opts{'c'}) {
      $int = 'email-command';
    }
    else {
      $int = 'email-request';
    }
    parse_commands($mj, $opts{'l'}, $opts{'c'} || '', $int, $opts{'req'});
  }
  elsif ($request_ans eq 'owner') {
    forward_to_owner($mj, $opts{'l'});
  }
  else {
    respond_with_file($mj, $opts{'l'});
  }
}
# if at -owner (-o) or -moderator (-M) look for bounces and 
# forward everything else to the owner or moderator
elsif ($opts{'o'} or $opts{'M'}) {
  # forward to owner; if -l is present, forward to that list else assume
  # we're majordomo-owner.
  forward_to_owner($mj, $opts{'l'} || 'GLOBAL', $opts{'M'});
}
  
# if at majordomo (-m) parse as normal
elsif ($opts{'m'}) {
  parse_commands($mj, '', '', 'email');
}

# else something's screwed; we already processed the resend case earlier
else {
  $::log->abort("mj_email not called with -m, -o, or -r!");
}

$::log->message(50, "info", "-----Calling destructors-----");
undef $mj;
undef $::mj;

$::log->out;  
exit ($opts{'S'} ? 99 : 0);

# Forward the message to the list owner.  Call owner_start, owner_chunk,
# owner_done passing in all of the message.
sub forward_to_owner {
  my ($mj, $list, $moderator) = @_;
  my ($from, $ok, $mess, $sess, $request);

  ($sess, $from) = connect_no_parse($mj, 'owner');
  return unless $sess;

  # Some MTAs hand the message to us with the mbox separator prepended.
  # Sending this on as part of the headers can hose some MTAs, so we strip
  # it.  The regexp doesn't harm the body $sess contains only the headers.
  $sess =~ s/^From .*?\r?\n//;
  $moderator ||= '';

  $request = {
    'command'   => 'owner_start',
    'list'      => $list,
    'mode'      => $moderator? 'M' : '',
    'password'  => '',
    'user'      => $from,
  };
  ($ok, $mess) = $mj->dispatch($request);
  return unless $ok;

  $_ = $sess;
  $request->{'command'} = 'owner_chunk';
  while (1) {
    last unless defined $_;
    ($ok, $mess) = @{$mj->dispatch($request, $_)};
    return unless $ok;
    $_ = <STDIN>;
  }
  $request->{'command'} = 'owner_done';
  ($ok, $mess) = @{$mj->dispatch($request)};
  return unless $ok;
  1;
}

# Resend a message; call post_start, post_chunk, post_done passing in all
# of the message.
sub resend {
  my ($mj, $list, $sublist) = @_;
  my ($from, $ok, $mess, $request, $sess);

  ($sess, $from) = connect_no_parse($mj, 'resend');
  return unless $sess;

  # Some MTAs hand the message to us with the mbox separator prepended.
  # Sending this on as part of the headers can hose some MTAs, so we strip
  # it.  The regexp doesn't harm the body $sess contains only the headers.
  $sess =~ s/^From .*?\r?\n//;
  $sublist ||= '';

  $request = {
    'command'   => 'post_start',
    'list'      => $list,
    'mode'      => '',
    'password'  => '',
    'sublist'   => $sublist,
    'user'      => $from,
  };

  ($ok, $mess) = @{$mj->dispatch($request)};
  unless ($ok) {
    $::log->message(1, 'info', "Resend failed: $mess");
    return;
  }

  $_ = $sess;
  $request->{'command'} = 'post_chunk';
  while (1) {
    last unless defined $_;
    ($ok, $mess) = @{$mj->dispatch($request, $_)};
    return unless $ok;
    $_ = <STDIN>;
  }
  $request->{'command'} = 'post_done';
  ($ok, $mess) = @{$mj->dispatch($request)};
  return unless $ok;
  1;
}

# Just call the response_file method.
sub respond_with_file {
  my ($mj, $list) = @_;
  my ($request, $user);
  
  (undef, undef, $user) = connect_and_parse($mj, 'request');
  $request = {
    'command'   => 'request_response',
    'list'      => $list,
    'mode'      => '',
    'password'  => '',
    'user'      => $user,
  };

  $mj->dispatch($request);
  1;
}

# These two functions exist because there are times when we can avoid
# loading the MIME modules in the client.  To connect, all we need is the
# header of the incoming message.  If we do no MIME parsing here (such as
# when we're forwarding to the owner or resending) we can just pull in
# everything until the first blank line.

# This pulls in the header, connects to the given majordomo object, and
# returns the header _including_ the first blank line.  Standard input will
# contain the remainder of the message.

sub connect_no_parse {
  my ($mj, $int) = @_;
  my (@hdr, $err, $from, $head, $i, $id, $sess);
  $from = 'unknown@anonymous';

  while (defined($i = <STDIN>)) {
    if ($i =~ /^\r?\n/) {
      @hdr = split /\n/, $sess;
      $head = new Mail::Header(\@hdr);
      $from = $head->get('from') ||
        $head->get('apparently-from') || 'unknown@anonymous';
      chomp $from;
      ($id, $err) = $mj->connect($int, $sess, $from);
      unless (defined $id) {
	$::log->complain("Error when connecting: $err");
	return;
      }
      $sess .= $i;
      last;
    }
    $sess .= $i;
  }

  $from =~ /(.*)/; $from = $1;
  ($sess, $from);
}

# This parses the message and connects to the provided Majordomo object.
# The MIME entity, unfolded header and user/reply address (stripped and
# unstripped) will be returned.
sub connect_and_parse {
  my ($mj, $int) = @_;
  my($entity, $head, $mime_parser, $ok, $user, $subject, $suser);

  $::log->in(85, undef, "info", "Setting MIME parser properties");
  $mime_parser = new Mj::MIMEParser;
  $mime_parser->output_to_core($mj->global_config_get(undef, undef, 
						      "max_in_core"));
  $mime_parser->output_dir($::TMPDIR);
  $mime_parser->output_prefix("mje");
  $::log->out;

  # One line does all of the parsing!
  $::log->in(80, undef, "info", "Taking apart the incoming message");
  $entity = $mime_parser->read(\*STDIN);
  $::log->out;

  return unless $entity;

  # Get the header.
  $::log->in(80, undef, "info", "Parsing the header");
  $head = $entity->head;
  $head->unfold;
  $::log->out;

  $user = $head->get('from') || $head->get('apparently-from');
  chomp $user;

  unless ($user) {
    $subject = $head->get('subject') || "no subject";
    chomp $subject;
    $head->replace('Subject', 
                   "Majordomo error: no address found (was: $subject)");
    $user = $mj->global_config_get(undef, undef, 'whoami_owner');
    $mj->mail_entity('', $entity, $user) if ($user);
    $entity->purge;
    return;
  }

  # Connect; gives back the stripped user
  ($ok, $suser) = $mj->connect($int, $entity->head->as_string, $user);

  # If it failed, just clean up and exit.  Should probably tell the owner.
  unless (defined($ok)) {
    $::log->complain("Error connecting: $suser");
    $entity->purge;
    exit ($opts{'S'} ? 99 : 0);
    #    $::log->abort("Connect failed: $suser");
  }

  ($entity, $head, $suser, $user);
}

# Parse commands in the subject here; we do this early to get the debug log
# going.  XXX Support ACCEPT, REJECT, LIST and PASS in the subject, too.  The
# first two for quick confirmation token processing; the latter two for
# bypassing failed "access" checks.
use Date::Format;
sub parse_commands {
  my ($mj, $deflist, $command, $int, $req) = @_;
  my (@entities, @events, $args, $commands, $data, $debug_file, $debug_log,
      $debug_reply, $entity, $fh, $file, $head, $i, $list, $mode, $ok,
      $pass, $repl, $request, $sender, $server, $sub_addin, $subject,
      $sub_start, $time, $top, $token, $user, $uuser);

  ($entity, $head, $user, $uuser) = connect_and_parse($mj, $int);
  # 65 is EX_DATAERR (error in input data)
  exit 65 unless $entity;
  $subject = $head->get('subject') || "";

  # Look for a possible token
  $token = $mj->t_recognize($subject);

  if ($subject =~ s/DEBUG\s*(\d+)\s*//) {
    $debug_reply = $1;
    $debug_file  = "$::TMPDIR/mje.$$.debug";
    $debug_log =
      $::log->add(method      => 'file',
		  filename    => $debug_file,
		  id          => 'mje',
		  level       => $debug_reply,
		  subsystem   => 'mail',
		  log_entries => 1,
		  log_exits   => 1,
		  log_args    => 1,
		 );
  }

  # Extract a password from an Approved: header
  $pass = $head->get('approved') || '';
  $pass =~ s/^\s*//; $pass =~ s/\s*$//;

  $::log->message(35, "info", "Message from $user.");

  # Need to bail if we're talking to ourselves, either here (it's convenient)
  # or when checking access.

  if ($mj->global_config_get(undef, undef, 'return_subject') &&
      defined($head->get('subject')) && $head->get('subject') =~ /\S/)
    {
      $sub_addin = ': ' . (substr($head->get('subject'), 0, 40));
      chomp $sub_addin;
    } 
  else {
    $sub_addin = '';
  }
  $sub_start = 'Majordomo results';

  ($command, $mode) = split('-', $command, 2) if defined($command);
  $mode = '' unless defined $mode;

  if (defined $command and command_legal($command)) {
    # Iterated commands are not yet considered.
    $request = {
		'command'   => $command,
		'list'      => $deflist,
		'mode'      => $mode,
		'password'  => $pass,
		'user'      => $uuser,
		%{$req},
	       };

    $file = &Majordomo::tempname();
    $fh = gensym();
    if (open ($fh, ">$file")) {
      call_format($command,
                  $mj, $fh, $fh, 'text', $request,
                  $mj->dispatch($request));
      close $fh;
    }
    else {
      # The command was not issued; return EX_IOERR.
      exit 74;
    }
    push @entities, build MIME::Entity
      (
       'Encoding'    => '8bit',
       'Path'        => $file,
       'Filename'    => undef,
       '-To'         => $uuser,
      );
  }
  else {
    ($commands, @entities) = 
      Mj::Parser::parse_entity
	  ($mj,
	   tmpdir     => $::TMPDIR, 
	   entity     => $entity,
	   reply_to   => $uuser,
	   deflist    => $deflist,
	   token      => $token,
	   password   => $pass,
	  );

    # If the number of commands processed is 0, this could indicate
    # an autoresponder mail loop.  Record the sender's address in the 
    # parser database.  If more than three failures have occurred 
    # in the last hour, forward the reply to the domain owner instead
    # of returning it to the user.
    unless ($commands) {
      $time = time;
      $data = $mj->record_parser_data($user, $time, 'none', 0);
      if ($data) {
        @events = split " ", $data;
        $ok = 0;
        for $i (@events) {
          if ($i =~ /^(\d+)/) {
            if ($1 + 3600 > $time) {
              $ok++;
            }
          }
        }
        if ($ok > 3) {
          $sub_start = "Possible mail loop with $user";
          $user = $mj->global_config_get(undef, undef, 'whoami_owner');
        }
      }
    }
  }

  if ($debug_reply) {
    push @entities, build MIME::Entity
      (
       Encoding    => "8bit",
       Path        => "$debug_file",
       Filename    => undef,
       Description => "Debugging information",
       Top         => 0,
      );
  }

  # Somehow we need to put together all of the entities and the debug info.
  # If we just have one entity, we add the necessary headers and send it
  # (this avoids attaching useless MIME crap).  If we have multiple
  # entities then we build a top and attach them all to it.
  if (@entities == 1) {
    $top = shift @entities;
    # XXX This is nasty, because MIME-Tools might start supporting a newer
    # MIME version at any time, but we have to do this until we get
    # MIME::Entity::make_top.
    $top->head->replace('MIME-Version', '1.0');
  }
  else {
    $top = build MIME::Entity
    (
      Type     => 'multipart/mixed',
      Encoding => '8bit',
    );

    for $i (@entities) {
      $top->add_part($i);
    }
  }

  $head = $top->head;
  $head->replace('to'     , $uuser);
  $head->replace('subject', "Majordomo results$sub_addin");
  $head->replace('from'   , $mj->global_config_get(undef, undef, 'whoami_owner'));
  $head->replace('date'   , time2str("%a, %d %b %Y %T %z", time));
  $head->delete('reply-to');
  $repl = { $mj->standard_subs('GLOBAL') };
  for $i ($mj->global_config_get(undef, undef, 'message_headers')) {
    $i = $mj->substitute_vars_string($i, $repl);
    $head->add(undef, $i);
  }

  $sender = $mj->global_config_get(undef, undef, 'sender');
  $server = $mj->global_config_get(undef, undef, 'whoami');
  if ($sender eq $user) {
    # Avoid mail loops with empty sender.
    $sender = '';
  }

  $::log->delete($debug_log) if defined $debug_log;
  open BLAH, ">$::TMPDIR/mje.$$.final" ||
    $::log->abort("Couldn't open final output file, $!");
  $top->print(\*BLAH);
  close BLAH;

  $mj->mail_message($sender, "$::TMPDIR/mje.$$.final", $user)
    unless (!$user or ($user eq $server));

  # Purge all tempfiles created by the entities.  XXX Ugh, need to clean up
  # the variable names.
  $entity->purge;
  $top->purge;
  unlink "$::TMPDIR/mje.$$.final";
  1;
}

sub call_format {
  my $command = shift;
  require Mj::Format;

  no strict 'refs';
  &{"Mj::Format::$command"}(@_);
}

# Look in $ENV{DEFAULT} which tells us the local-part of the address we're
# being run at, and fake the other options.  Expect that we were called
# with -d giving us the correct domain, so we don't have to fake that.
# Use $ENV{LOCAL} if $ENV{DEFAULT} does not exist.
sub do_qmail {
  my $addr;
  if(exists $ENV{DEFAULT}) {
    $addr = lc($ENV{DEFAULT});
  }
  else {
    $addr = lc($ENV{LOCAL});
  }
  if ($opts{T}) {
    $addr =~ s/^$opts{T}//;
    $addr =~ s/^-//;
  }

  my($list, $fun);

  # First look at majordomo addresses XXX These are hardcoded to
  # 'majordomo', but it would take too much time to load Majordomo.pm so
  # that we can extract the real majordomo address.
  if ($addr eq $opts{'Q'}) {
    $opts{'m'} = 1;
    return;
  }
  if ($addr eq "$opts{'Q'}-owner" || $addr eq "owner-$opts{'Q'}") {
    $opts{'o'} = 1;
    return;
  }

  # Now assume we have a list address; look for owner-, -owner, -request.
  # Note breakage if the list name actually has any of these in it.
  if ($addr =~ /^owner-(.*)$/) {
    $list = $1; $fun = 'owner';
  }
  elsif ($addr =~ /^(.*)-moderator$/) {
    $list = $1; $fun = 'moderator';
  }
  # Note that we don't anchor to the end; we may be receiving a probe
  elsif ($addr =~ /^(.*)-owner/) {
    $list = $1; $fun = 'owner';
  }
  elsif ($addr =~ /^(.*)-request$/) {
    $list = $1; $fun = 'request';
  }
  elsif ($addr =~ /^(.*)-subscribe$/) {
    $list = $1; $fun = 'subscribe';
  }
  elsif ($addr =~ /^(.*)-unsubscribe$/) {
    $list = $1; $fun = 'unsubscribe';
  }
  else {
    $list = $addr; $fun = 'list';
  }

  # Now we have the (supposed) list name.  Check that it exists by looking
  # directly into $::LISTDIR/$opts{'d'}.  Of course this assumes things
  # about the structure of the internal storage, but we have to trust that
  # or else go through some other expensive operations.  In this case, we
  # want to be quick.
  unless (-d "$::LISTDIR/$opts{'d'}/$list") {
    # It's not bound for us; just exit 0 so the next entry in
    # .qmail-default will be parsed.
    exit 0;
  }

  # XXX Addresses for auxiliary lists are not considered.
  # It is bound for us; fix up the options
  $opts{'l'} = $list;
  $fun eq 'list'        and $opts{'r'} = 1;
  $fun eq 'moderator'   and $opts{'M'} = 1;
  $fun eq 'owner'       and $opts{'o'} = 1;
  $fun eq 'request'     and $opts{'q'} = 1;
  $fun eq 'subscribe'   and $opts{'c'} = "subscribe";
  $fun eq 'unsubscribe' and $opts{'c'} = "unsubscribe";
}

=head1 COPYRIGHT

Copyright (c) 1997, 1998, 2001 Jason Tibbitts for The Majordomo Development
Group.  All rights reserved.

This program is free software; you can redistribute it and/or modify it
under the terms of the license detailed in the LICENSE file of the
Majordomo2 distribution.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the Majordomo2 LICENSE file for more
detailed information.

=cut

#
### Local Variables: ***
### mode:cperl ***
### cperl-indent-level:2 ***
### End: ***
