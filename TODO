Various items discussed recently (2000.10.25) on mj2-dev.  Items should get
added here when it is decided that something needs to be done, and removed
when the folks who asked for the feature/fix have agreed that the feature
is in/problem is fixed, or that the feature is not needed/problem really
isn't a problem.

==================================
Implemented, awaiting verification
==================================

Better Queue Handling
---------------------

If a message causes Majordomo to crash, it remains in the queue and will
continue to cause crashes.  Thus it is a good idea to rename queue files so
they don't get rerun.  However, in the case of system crashes/random
Majordomo crashes/other nonrepeatable issues, you _do_ want the queue file
processed.  This it is advantageous to have a processing count and to only
process files some number of times normally before giving up on the file.

Also, giving up on a file is not good, as it can lead to problems not being
noticed.  Thus the idea procedure would be to process a queue file normally
twice (or thrice) and then on the next try, to turn up debugging and log to
a special file.  The next try, delete the queue file.  The owner also needs
to be informed somehow.

To manitain the generation count (and perhaps additional data we might want
to keep) mj_queuerun will maintain a status file named by prepending the
message filename with a '.'.  In it is stored a single line with a single
number: the attempt count.  No locking of the status file is necessary.

This is implemented as requested.


Duplicate Elimination
---------------------

Some code is in place to globally eliminate duplicates; when a message is
posted to multiple lists, users who are on more than one of them only get
one message if their class is set to "unique".  If the class is not unique
on all lists, the behavior is variable depending on which list gets the
message first.  If the user is in digest mode on one list and unique on the
other, they will get a separate copy and a copy in the digest.  This is not
technically difficult to change.

This is implemented.  The requesters of this feature have not commented on
whether it satisfies their requirements.


===========================
Not yet (fully) implemented
===========================


List Templates
--------------

Paul Hancock: [...] I specifically wanted something that would allow groups
of lists to be managed with a given DEFAULT file... not necessarily
domain-wide, which is now possible just by changing DEFAULT.

One proposal is to have multiple DEFAULT lists, named DEFAULT-template.
Another is to allow multiple configuration files per list.

Some of the code necessary for multiple configuration files per list is
already in CVS.  It is not certain that it will remain there, or whether
the end result will satisfy the request.  The "multiple DEFAULT list"
concept may be orthogonal to it.


Configuration Rewrite
---------------------

The current configuration process is incompatible with modern package
managers.  Defaults cannot be hardcoded into the scripts.  Only two things
can be: the path to Perl and the location of the config file.  Everything
else should be put into a separate configuration file.  This cound (should)
subsume the SITE config file currently used for defaults that aren't
hardcoded.

The config file should probably be raw Perl code so that it is as fast as
possible to load.  The Q&A section of Makefile.PL can be extracted and
turned into an "easy setup" script.

Also, the temporary directory (and probably several other variables) needs
to be made part of the site config instead of a per-domain configurable.


Wrapper Security
----------------

The wrapper needs to sanitize as much of its environment as possible.  This
involves making a list of needed env variables and deleting everything else.


Bounce Handling
---------------

Hook up bounce_rules execution when a bounce comes in.  Most of the
infrastructure is in place for this.

bounce_rules actions:

remove - remove the bouncing user and inform the owner
inform - inform the list owner of the bounce but don't remove the user
remove-quiet - remove the user but don't inform the owner
ignore - don't tell the owner and don't remove the user
Statistics are always gathered when appropriate.

bounce_rules variables:

$failure - true if bounce indicates a failure
$warning - true if bounce indicates a warning
$consecutive - count of consecutive messages bounced
(more)

default:

# Don't bother the owner with warnings
ignore
$warning

# Delete users after 50 consecutive bounces
remove
$consecutive > 50

# All bounces not matched by the above will cause an informative message to
# be sent to the owner.


