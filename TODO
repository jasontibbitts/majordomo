Various items discussed recently (2000.10.25 and later) on mj2-dev.  Items
should get added here when it is decided that something needs to be done,
and removed when the folks who asked for the feature/fix have agreed that
the feature is in/problem is fixed, or that the feature is not
needed/problem really isn't a problem.

==================================
Implemented, awaiting verification
==================================

Better Queue Handling
---------------------

If a message causes Majordomo to crash, it remains in the queue and will
continue to cause crashes.  Thus it is a good idea to rename queue files so
they don't get rerun.  However, in the case of system crashes/random
Majordomo crashes/other nonrepeatable issues, you _do_ want the queue file
processed.  This it is advantageous to have a processing count and to only
process files some number of times normally before giving up on the file.

Also, giving up on a file is not good, as it can lead to problems not being
noticed.  Thus the idea procedure would be to process a queue file normally
twice (or thrice) and then on the next try, to turn up debugging and log to
a special file.  The next try, delete the queue file.  The owner also needs
to be informed somehow.

To manitain the generation count (and perhaps additional data we might want
to keep) mj_queuerun will maintain a status file named by prepending the
message filename with a '.'.  In it is stored a single line with a single
number: the attempt count.  No locking of the status file is necessary.

This is implemented as requested, but still needs tweaking.  The queue file
should be saved off somewhere.


===========================
Not yet (fully) implemented
===========================


List Templates
--------------

Paul Hancock: [...] I specifically wanted something that would allow groups
of lists to be managed with a given DEFAULT file... not necessarily
domain-wide, which is now possible just by changing DEFAULT.

One proposal is to have multiple DEFAULT lists, named DEFAULT-template.
Another is to allow multiple configuration files per list.

Some of the code necessary for multiple configuration files per list is
already in CVS.  It is not certain that it will remain there, or whether
the end result will satisfy the request.  The "multiple DEFAULT list"
concept may be orthogonal to it.


Configuration Rewrite
---------------------

The current configuration process is incompatible with modern package
managers.  Defaults cannot be hardcoded into the scripts.  Only two things
can be: the path to Perl and the location of the config file.  Everything
else should be put into a separate configuration file.  This cound (should)
subsume the SITE config file currently used for defaults that aren't
hardcoded.

The config file should probably be raw Perl code so that it is as fast as
possible to load.  The Q&A section of Makefile.PL can be extracted and
turned into an "easy setup" script.

Also, the temporary directory (and probably several other variables) needs
to be made part of the site config instead of a per-domain configurable.


Wrapper Security
----------------

The wrapper needs to sanitize as much of its environment as possible.  This
involves making a list of needed env variables and deleting everything else.


Uuencode and ms-tnef in the body as "attachments"
-------------------------------------------------

Treat uuencode and ms-tnef chunks in the body as attachments so that
attachment_rules can be used to trap or remove them.

Come up with some fake MIME type used to represent these "attachments" so
that they can be put in attachment_rules.  "uuencode" and "ms-tnef" are
probably sufficient, although there is potential for confusion because a
rule of "uuencode | discard" wouldn't discard a real MIME part of type
"application/x-uuencode".

When checking for taboo lines, if the above fake mime types are referenced
in attachment_rules, scan the body for a sequence which identifies them and
trap the message accordingly.  (How to check if they're referenced?  Run
the rules code and check the result.)

When modifying the body, if the above fake mime types are marked as
"discard" in attachment_rules, scan the body for the identifying sequence
and drop the whole body part up to and including the ending sequence.
Insert a message indicating that the data was deleted.


MTA configuration hook
----------------------
Many MTAs need special programs to be called to build database files out of
the aliases and associated files which we generate.  This is not generally
possible to do within Majordomo for two reasons: 1) it is site-dependent
and 2) it requires priviliges that Majordomo doesn't have (frequently
root).

To solve this add a "hook": look for a program in a specified place and, if
it exists, call it with some defined calling convention.

For many sendmail installations, it suffices to call newaliases, although
on newer sendmails this must be done as root.  Other installations need
calls to makemap as well.

Possibilities: 1) setuid program to exec newaliases 2) touch a file, which
is checked by a root-owned cron job that runs newaliases and makemap if
it's present.

Exim can use this feature to use databases instead of flat files, which
would speed up installations with large numbers of domains or lists.

Suggested script location: $install_dir/libexec/build_databases.  Not in
  the normal bin directory, because this is not a user executable.

libexec chould be mode 700, owner majordomo, group majordomo.  (This is
  security sensitive, and should be restricted beyond normal majordomo
  files.)

Arguments taken: none; the script gets called any time a change is made and
  should generate all databases.

Permissions: 700, owned by majordomo or 750, owned by root, in majordomo
  group.


mj_queuerun lifetime limiting
-----------------------------
In addition to an idle timeout, mj_queuerun needs a limit on how many
messages it will process without exiting.  This keeps memory leaks under
control.  The queue server will simply start another runner when one exits,
so this is a safe cleanup mechanism.


mj_queueserv bug with all dead queue runners
--------------------------------------------
mj_queueserv has a bug where it will queue the message due to excessive
load when in reality every single queue runner has died.  This happens
because it runs through all of the slots looking for a live and unbusy
runner, cleaning up dead ones along the way.  But it needs to restart the
search if it's cleaned up any dead ones but has run out of slots without
finding any waiting runners.


Making use of FastCGI or something like it
------------------------------------------
Startup time is painful, and startup time of the web interfaces is
especially painful since every button click will open another URL and
compile another script.

There are tools which maintain pools of service threads to handle incoming
requests; FastCGI is just one.  Some don't work with setuid programs.  I'm
pretty sure that one of them will work for us.


Stale queue entries
-------------------
It is rare but possible for a message to sit in the incoming queue with no
active queue runners; the message will sit around until another message
comes in and kicks off a queue runner, which will then take care of both
messages.  There should be a way to force a queue run without sending a
message.


Queue view
----------
There should be a way to view the message queue.  A separate program,
mj_mailq, would be sufficient. 


Load balancing
--------------
Configure a list when it is created to use digest and triggers settings
randomly chosen from a collection of possibilities.  This would
distribute the periodic load due to digest deliveries more evenly.


Auxiliary lists
---------------
Convert the owners and bounce_recipients addresses into auxiliary
lists to support address validation and access controls.

