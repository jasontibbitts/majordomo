NOTE: Details/corrections are below the configshow output!

= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
configset GLOBAL access_rules <<TAG
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
GLOBAL means you are setting site parameters, not just one list
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

(extracted on 7 Mar 1999 from configshow-comments, default value is below)

# access_rules
# (empty)              [access_rules] <access>
#
# A table containing access rules.  This is a very powerful and
# unfortunately somewhat complicated mechanism for precisely restricting
# access to Majordomo functions which I will document later.
#
configset GLOBAL access_rules << ENDAAB
show,which,who
deny
ALL
ENDAAB

==> see also: configset     (for an overview and list of all variables)
==> see also: configedit    (to set the variable to a non-default value)
==> see also: configshow    (to display the variable's current value)
==> see also: configdefault (to have the variable track the default value)
==> see also: configset access_rules (applies to regular lists also)

+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


addendum to Majordomo2 "configset access_rules" File - updated 6 Mar 99

The "access_rules" command can be set for individual lists as well as
for the GLOBAL pseudo-list. There are different requests that can be
trapped by each one.  If a command takes a list, it is restricted by
the list-specific access_rules. If it doesn't, the GLOBAL rules are used.

For trapping of illegal words or phrases, it is best to use the
commands documented in "help configset admin_body" rather than using
inline access_rules. If you put a pattern in access_rules, it is
matched against the user's address and nothing more.  If you want to
match parts of the message (or other parts of the header) use taboo_*
or admin_*, since access_rules does not get fed any part of the message.

NOTE: Refer to "help configset access_password_override" for info on
      letting a list password bypass these rules.

This information is below:
  Section 1 - Working description of the access_rules config variable
  Section 2 - Hints and suggestions for how and why to use access_rules
          2.1 - how to test access_rules quickly
          2.2 - why deny is worse than consult or confirm
          2.3 - restricting non-subscriber posts
          2.4 - files and subjects for 'replyfile's or 'mailfile's
          2.5 - variables you can use in 'replyfile's or 'mailfile's
          2.6 - examples of useful access_rules, general hints
          2.7 - improving the default "confirm" and "consult" files

Section 1 is taken from the Majordomo source release as of 12/98, and
represents the author's comments. It is not a spec, but rather (as it
says) a working document subject to change. It has not been edited, and
may not agree with Section 2.

Section 2 is from a site manager's observations. It is ALSO not a spec,
but represents one person's experience. It was written after Section 1.

WARNING: As of 2/99, there are some interactions between your choice
of replyfile or mailfile and the subscriber's setting of ack/noack (via
the "set" or "configset default_flags" commands). Error messages can
vanish (for noack with replyfile, unless ack_denials_always is enabled
for the list in question) or lacking information because variables are
not always evaluated (for mailfile). Refer to "help set" for more details.

It is recommended that you do NOT use replyfile unless you are sure the
user will not "set noack".

In general mailfile is almost never the right thing to do since the
user will already be receiving an acknowledgement through either an
explicit ack message (for posts) or the regular command return. Using
mailfile can produce multiple messages for a single event, and mailfiles
cannot contain as much information as replyfiles (because some variables
are not evaluated).

Please contact the maintainer as indicated at the bottom of this file
if you have any suggestions or corrections. The access_rules command
is very complicated, and there is no doubt that the documentation can
be improved with your help.


+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +

Section 1 - Working description of the access_rules config variable:

First line - request 
  Comma-separated list of advertise, alias, post, subscribe, unsubscribe,
  ...

  This determines the request(s) that this rule applies to

Second line - action
  Comma separated list of allow, confirm, consult, confirm_consult, deny,
  forward, reply, replyfile, mailfile.

  This determines the actions to be taken if the rule matches.

  allow=N - the request succeeds.  If given an argument (allow=N) then N
    will be passed back to the calling routine (used in 'which' requests to
    limit the number of returned hits, and in 'who' to determine whether or
    not the user can see even hidden addresses).  If N is not given, it
    defaults to 1.  Be careful; this can render the 'which' command almost
    useless.

  confirm=file - a confirmation token is sent to the user who will be affected
    by the request.  If given an argument, the given file will be used as
    the confirmation message.  If not, the file "confirm" is used.

  consult=file,M,group,N - a token is sent to a moderator/group of
    moderators/randomly chosen subset of a group of moderators.  The
    following comma-separated arguments are taken:
      file - the file used for the consultation message (not used if
        request=post).
     M - the number of approvals that are required.  This permit a
       rudimentary form of group moderation (default 1).
     group - the moderator group to send the confirmation request to
       (defaults to sending to moderator).
     N - the number of members of the moderator group to send to, chosen at
       random (defaults to all of the group).
     (some of this is unimplemented)

  confirm_consult - first confirms the action with the victim, then
    consults the list owner.

  deny - disallows the action.

  forward=address - forwards the command to another Majordomo server
    running at address.

  reply=message - sends a one-line message back as part of the command
    return.  Enclose the message in quotes to embed commas.  Multiple reply
    messages are concatenated with newlines.

  replyfile=file - sends the contents of the given file back as part
    of the command return.

  mailfile=file - sends a message back in a separate reply.

  The message or file in the previous three actions can contain
    embedded variables which will be expanded before the message is
    sent.

  If neither of the previous three are given, a default reply will be
    used depending on what the primary action is.

Up to next blank line - code
  This is code in a simple language that is used to determine whether or
  not the action (line 2) should be taken.

  The following can be used in rules:

  Logical Connectives:
  AND, && - the conditions on both sides must be true
  OR, ||  - any one or both of the conditions must be true.
  NOT, !  - the following condition must be false
  
  Grouping:
  (, ) - enclose groups of conditions

  Username match:
  /expression/ - a Perl regular expression applied to the requesting user's
    address.

  Membership check:
  @, @MAIN - these are equivalent, and check to see that the user is a
    list subscriber.
  @auxlist - checks to see that the user is a member of the named auxiliary
    list.

  Variable check:
  \$variable - checks to see that the supplied variable is true.
  \$variable=value - checks that the variable equals (stringwise) the given
    value.

Semantics: 
  Rules for a particular request are processed in order; the _first_ rule
  that matches is taken.

  If no rules match, the "default" action is taken, which results in a
  reasonable emulation of the 1.94.3 behavior using *_access, moderate,
  restrict_post, etc.

Supported variables:
...

Example rules:

Equivalent to moderate=yes:
post
consult
ALL

Ban some users from subscribing:
subscribe
deny,reply="You are banned."
@banned

Deny all access to off-site users:
access
deny
NOT /my.site.com/

or:

access
allow
/my.site.com/

access
deny
ALL


+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +

Section 2 - Hints and suggestions for how and why to use access_rules


2.1 - how to test access_rules quickly

  To test things out, try restricting the 'who' request in the same way
  as 'post', with access_rules, but leave out any 'mailfile' or 'replyfile'
  actions.  Then use the mj_shell command with the -u option to spoof a
  username for testing various addresses:
     mj_shell -u someone@example.com who listname

  Testing addresses with mj_shell is much easier and faster than using
  email to reach the command parser. Be careful, however, that you do
  not use REAL email addresses unless you check with the person first.
  It is possible to generate error messages or confirmation requests
  that will alarm the person actually at the email address you tested.

  If you see anomalous behavior, tack on the '-D' option when starting
  mj_shell and review the spew or save it to contact the author. The
  syntax of access_rules is complex but powerful. Be sure to test it.

  If you have parsing errors, remember to escape the "@" in addresses:
     post
     deny
     /joe\\@blow.com/

  If your rules don't match expected addresses, watch case sensitivity:
     post
     deny
     /nowhere.com/i

  See "help patterns" for more information on Perl regular expressions.


2.2 - why deny is worse than consult or confirm

  deny    - post never shows up at all when expression matches
  consult - post goes to list owner for "accept" when expression matches
  confirm - post MAY go to message originator for "accept"

  The problem with "deny" is that neither the owner nor the person trying
  to post gets a notice. The post just evaporates since there isn't
  generally any kind of reply channel when doing a post. (Unlike when you
  send commands, where there is a message set up for the purpose of sending
  back the results of the commands.) There are additional actions that the
  "mailfile" and "replyfile" options can provide in some cases.

  If what you need is for the owner to review and approve the post, not for
  it to just vanish, use "consult". The "confirm" option is when the person
  making the post needs to be asked, while "consult" asks the list owner.

  In some cases, "confirm" cannot know who the originator was. In others,
  it will ask the "victim" for approval (like when you send from one
  account to subscribe a second account). It is possible, but not certain,
  that some confirmations will go the list owner or the site administrator
  (essentially the "consult" behavior but when "confirm" is used).

  WARNING: As of 2/99, using deny with "set listname noack" and replyfile
  in access_rules can mean the user gets not message, the owner gets no
  message, and the list gets no post. Errors simply vanish in some cases.
  If you are using "deny", make sure to use "configset default_flags"
  or else use "set" to add "ackall" flags to each user's subscription.
  See "help who" for a technique to change user flags for the entire list.


2.3 - restricting non-subscriber posts

  Majordomo has its roots in an innocent time, when spam came in a can.
  Anyone can post to a Majordomo list, whether or not they are subscribed,
  by default. If you leave your list that way, the spammers may find out
  and bury you with unsolicited email (causing people to unsubscribe and/or
  complain to you).

  The classic Majordomo (1.9x) way of restricting posting is with the
  restrict_post variable; if you put the name of your list in it, only
  subscribers will be allowed to post.  Messages from other folks will
  be sent to you for approval.

  The Majordomo2 way to deal with it is to use access_rules:
     post
     deny, replyfile=NonSubscriberPost
     !@MAIN
  where the file "NonSubscriberPost" can be created under the GLOBAL
  pseudo-list (so it is available to all lists) with
     put GLOBAL /NonSubscriberPost
  (see "help put" for details).

  You (as the list owner) will then be consulted on all post requests sent
  by anyone whose address is not on the main list.  There are other things
  you can do, too; replace 'deny' with 'consult' and the list owner will
  have a chance to allow non-subscriber posts if they make sense (but will
  also have to deal with rejecting all spammer posts).

  It is unquestionably better to "deny" non-subscribers than to "allow"
  subscribers. The deny method still filters posts through admin_body and
  taboo_body, whereas the allow method doesn't. See the example section
  below for more about "allow", and refer to "help configset admin_body"
  for details of admin_* and taboo_* settings.


2.4 - files and subjects for 'replyfile's or 'mailfile's

  Please refer to "help put" for message files that are used by default!
  (including a description of variables that will be evaluated)

  Whether you are storing "access_rules" for the GLOBAL pseudo-list or an
  actual list, you should use the "put" command to create the file in the
  right place and with the right file ownership and access. Don't attempt
  to provide a full pathname in the operating system! The file pathname
  used by "access_rules" is scoped by the list the rule applies to (refer
  to "help put" for more information on file scoping and directories).

  Replyfile and mailfile also allow you to specify the subject
  of the message sent by the server. Refer to "help put" for the
  complete syntax of the put command, but here is an example that
  would supply the file "NonPost" used in the deny rule below:
     put GLOBAL /NonPost non-subscribers cannot post to \$LIST <<ENDNONPOST
     You must subscribe to \$LIST before you can send messages to it.
     NOTE: YOUR MESSAGE DID NOT GO TO THE LIST OR THE LIST OWNER.
           No one will see it unless you take further action!
     Your current header shows you are: \$VICTIM
     ENDNONPOST

  Don't put quotes around the subject, or they will show up in the
  email the poster receives. The final subject may be just the words
  you supply, or in some cases Majordomo will add other words. In a
  few cases, Majordomo will replace your subject with a stock one.
  Test all access_rules messages as soon as you create them!

  If you use a reply or replyfile of "NONE" no ack is sent.  This is useful
  when you are having users confirm their own messages; there's no point in
  them receiving a confirmation message _and_ an ack.


2.5 - variables you can use in 'replyfile's or 'mailfile's

  If you want to replace Majordomo's error or explanatory message with
  one you write, use "replyfile" or "mailfile" options on access_rules.
  When composing the message, keep in mind that the person reading it
  may or may not remember what they did... so you need to give them as
  much information as possible in the message.

  Sometimes a pre-written message will be perfectly clear, but most
  of the time it will be MORE clear if you include the list name, the
  command, etc. Some people do not know what is in their mail headers,
  so it often helps (oddly enough) to tell them who you think they are!
  This type of information (list name, user name, command) can be put
  into the message using variables.

  Majordomo variables, for this purpose, are all upper case words with
  a leading dollar sign (as is common in Unix). If you mis-spell a
  variable, or use one that is not defined, it will show up in the
  mail message exactly as you typed it (dollar sign and all), so watch
  for these and be aware that unevaluated variables do not cause errors.
  Always create the error and get a copy of the message back before
  unleashing it on the list subscribers.

  There is currently no complete list of available variables, but
  notice that these variables can occur in both the subject and the
  message body. Refer to "help put" for how to store the files with
  subjects, but the general form is "put GLOBAL /file subject <<".
  The "subject" string on the "put" command will be the subject
  (or part of the subject) of the message sent by the server.

  Please refer to "help put" for message files that are used by default,
  and a description of variables that will be evaluated. Some variables
  you can use in 'replyfile's or 'mailfile's are:
     \$CMDLINE   - the command which REQUESTER sent
     \$EXPIRE    - token_lifetime setting, how long the 'accept' can wait
     \$LIST      - GLOBAL or the individual list, depending on the action
     \$MJ        - the server address, where accept/reject commands go
     \$MJOWNER   - the address of the domain owner
     \$OWNER     - the address of the list owner
     \$REMIND    - token_remind setting, in case a token is forgotten
     \$REQUESTER - the address which initiated the action
     \$SUBJECT   - the subject line from the REQUESTOR's header
     \$VICTIM    - the address of the person affected by the action
  Remember, to use one of these variables, the syntax is "\$VARIABLE",
  where the upper case name of the variable comes after a dollar sign,
  and you need to watch out for lines that get too long when the string
  replaces the variable name you type.

  See the next section for an example file using variables in both
  the subject line and the message itself.

  WARNING: In some cases replyfile works differently than mailfile. For
  example, trapping "configset taboo_header" violations and using
  access_rules to deny the post produces more fully evaluated variables
  with replyfile than with mailfile. On the other hand, replyfile can
  be skipped if the subscriber's flags are set to "noack", which is
  the Majordomo default unless "configset default_flags" changes it.
  When writing access_rules, test each one!


2.6 - examples of useful access_rules, general hints

  Note that first matching rule truncates the testing of other rules,
  and if an address matches a permissive rule first then restrictive
  rules which come later will not prevent the post. For example, to
  allow a list owner to post without subscribing:
     configset MYLIST access_rules << ENDACCESSRULES
     post
     allow
     theowner\\@domain.org

     post
     deny, replyfile=NonPost
     !@MAIN
     ENDACCESSRULES

  An "allow" command will override almost everything! If you have
  administrivia enabled, and are using admin_body or taboo_body to
  trap server commands that are accidentally sent to the list, the
  "allow" command in access_rules will bypass the *_body traps for
  the listed address(es).

  Remember that "@MAIN" is a magic string that matches all list
  subscribers, while "!@MAIN" matches all non-subscribers. There
  are subtle differences between allowing subscribers to post and
  denying non-subscribers the right to post - refer to the previous
  paragraph for one example.

  Use replyfile, NOT mailfile, so poster gets back only ONE message
  when a confirmation message is sent. Using "mailfile" for non-
  subscriber posts, for example, will result in the poster getting
  one message that says the post is stalled and ANOTHER message
  asking for confirmation via accept. Replyfile is less confusing.

  An alternative to admin_body or taboo_body is this access_rules:
     post
     deny, replyfile=ThisThreadIsDead
     /string from thread/i
  which bounces the post *IF* it finds a matching phrase in the message.

  Note the trailing "i", which makes the match case insensitive. Without
  that, the upper and lower characters in the string are significant.

  It is possible to negate or invert the test with a leading "bang", so
  that any post WITHOUT the string will fail:
     post
     deny, replyfile=ThisPhraseRequired
     !/string you want to require/
  which bounces the post *UNLESS* it finds a matching phrase in the message.

  To moderate a known abuser so they can post only with owner approval:
     post
     consult, mailfile=BannedOrModerated
     /abuser\\@WHERE.com/i
  remember to escape the "@" and add "i" for case insensitivity!

  To reject all posts that have attachments:
     post
     deny, replyfile=NoAttachmentAllowed
     \$mime_deny
  Please refer to "help configset attachment_rules" for details.

  This can be used to provide a non-default reply for violations of
  the admin_body, taboo_body, admin_header, and taboo_header commands:
     post
     deny, replyfile=SacredWordsUsed
     \$admin_body
  Please refer to "help configset admin_body" for a list of variable
  names which can be set when various patterns match. These are all
  numeric variables that can be tested with "<" and ">" or "==" to
  evaluate the "score" of a message against various rules.


2.7 - improving the default "confirm" and "consult" files

  Majordomo has a default message for "confirm" (when the user is asked
  for an accept/reject token) and "consult" (when the list owner is asked),
  but these files may not contain enough information for the person being
  asked to make an intelligent choice. You can replace one or both files
  with whatever text you choose.

  Below are suggestions for these two files, formatted into the "put"
  commands you would send to Majordomo. Refer to "help put" for the
  full syntax of that command, but note that these two commands store
  files in the GLOBAL pseudo-list and supply a useful subject line to
  accompany the message text:

-------------

put GLOBAL /confirm CONFIRM from \$LIST - reply with accept or reject <<ENDCONFIRM
Dear email list subscriber - the server needs your advice!
(you may be the target of a spammer, so if you did not
send the request below, DO NOT IGNORE this message)

This request apparently came  from account: \$REQUESTER
This request apparently applies to account: \$VICTIM
If these lines don't match, you should probably change the command below!

The command you (or someone else) sent is on the following line:
  \$CMDLINE

If you didn't send the command above, contact \$OWNER right away!

If you want this action to be taken, please reply to this message
with the word "accept" (without quotes) on a line by itself.

If you do not wish to allow this request, you may reject it by replying to
this message with the word "reject" (without quotes) on a line by itself.

When you reply to this message it should go to "\$MJ".
You must keep the magic number in the subject line (do not edit the
reply subject). If you do not respond within \$EXPIRE days, this token
will expire (e.g. doing nothing is the same as rejecting, but slower).
If you do not respond within \$REMIND days, a reminder will be sent.

To contact the list owner, send email to \$OWNER

ENDCONFIRM

-------------

put GLOBAL /consult CONSULT from \$LIST - reply with accept or reject <<ENDCONSULT
Dear list owner - the server needs your advice!

This request apparently came  from account: \$REQUESTER
This request apparently applies to account: \$VICTIM
The request is on the following line:
  \$CMDLINE

If you want this action to be taken, please reply to this message
with the word "accept" (without quotes) on a line by itself.

If you do not wish to allow this request, you may reject it by replying to
this message with the word "reject" (without quotes) on a line by itself.

When you reply to this message it should go to "\$MJ".
You must keep the magic number in the subject line (do not edit the
reply subject). If you do not respond within \$EXPIRE days, this token
will expire (e.g. doing nothing is the same as rejecting, but slower).
If you do not respond within \$REMIND days, a reminder will be sent.

For a list of all outstanding requests, send this command to \$MJ
   approve ListPassword showtokens \$LIST

ENDCONSULT

-------------


+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

For a list of topics, or this text, send one of the next two lines
   help topics
   help configset_access_rules_global
to the server at $MJ

Generated 8 Mar 1999 by SRE, web version available
