= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
configset  GLOBAL  admin_body <<TAG
[VALUE LINES]
TAG
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
configset listname admin_body <<TAG
[VALUE LINES]
TAG
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Default Value : /\bcancel\b/i ... (only first item is shown)
Data Type     : taboo_body
Category      : moderate
Password Notes: Visible only with password. 
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

EXAMPLE:
configset GLOBAL admin_body << ENDTAG
/subscribe/ 
/^set\b/i 1,1,body
/X-Loop: / 0,1,xloop
ENDTAG

$INCLUDE-config/admin_body

NOTE 1: The information below applies to "taboo_body" also, just
substitute the string "taboo_" wherever you see "admin_" below.

NOTE 2: The syntax below applies to "admin_headers" and "taboo_headers"
also, but the "nn" option (and its comma) is not present for headers.

The "admin_body" command causes the body of each message sent to a list to
be searched for patterns that the list owner wants to require or disallow,
and increments the value of a variable when one of the lines matches.
All of the patterns specified by this command are tested for every
message, and multiple matches increment (or decrement) the appropriate
variable. During processing of a post, various variables can be
tested by access_rules to determine how to handle the post. A default
message can be sent, or the variables can be tested in order to select
a very informative message as mentioned below and also explained fully
in "help configset access_rules".

WARNING: The admin_body command can be applied to the GLOBAL pseudo-list
or an actual list. The variable match name will be different in these
cases. GLOBAL matches will always be attempted even if per-list commands
exist, so there can be speed issues if you double-specify patterns. You
probably need a different password for GLOBAL and per-list settings.

-------------------------------------------------------------------------

Complete syntax of an admin_headers line:
   !pp ss,vv
Complete syntax of an admin_body line:
   !pp nn,ss,vv
where
   pp - is a Majordomo pattern (see "help patterns" for details)
   !  - is an optional invert flag (to look for MISSING lines)
   nn - is an optional number of lines to check for pp, 0 to disable
   ss - is an optional severity score for use in access_rules
   vv - is an optional variable name for use in access_rules
and the space in "pp nn" is required unless "nn" is not specified,
and the commas in "nn,ss,vv" are required if "ss" or "vv" are specified,
and "ss" cannot be specified without specifying "nn"
and "vv" cannot be specified without specifying "ss"

An example may help explain the syntax:

  !/(nasty|word)/ 10,20,naughty
  
  ||     |       |  |  |   |
  ||     |       |  |  |   "vv" - variable match name
  ||     |       |  |  |                  
  |+-----|-------+  |  "ss" - match severity/score
  |      |       |  |
  |      |       |  "nn" - number of lines to match
  |      |       |
  |      |       pattern delimiters (start and end of "pp")
  |      |
  |      pattern appropriate for the delimiters (middle of "pp")
  |
  invert flag (immediately before pattern, if used)

! = invert flag:
    if not used, success is when the pattern DOES match within "nn" lines
      (e.g. the pattern is DISALLOWED in every message)
    if present,  success is when the pattern does NOT match in "nn" lines
      (e.g. the pattern is REQUIRED in every message)

pp = pattern: see "help patterns" for details
     a normal Majordomo pattern of the type indicated by the delimiters used
     ('/' Perl regexp with auto-escaped @, '%' csh/dos, '"' exact substring)

nn = lines to match:
     if used, only this many lines of the message will be searched for "pp"
      - '0' causes checking of entire message instead of just a few lines
      - negative values are nonsense and not allowed
      - defaults to '0' for taboo_body matches and '10' for admin_body
     if not used, you cannot specify a score or a variable match name

ss = match severity/score:
     if used, an integer (possibly negative) indicating the score to add
      - the appropriate match variable is incremented or decremented
      - the total score of a message can be checked in access_rules
      - default score is '10'
     if not used, you cannot specify a variable match name

vv = variable match name
     the name of the match variable created for use in access_rules
      - defaults to 'body'    for admin_body    and taboo_body
      - defaults to 'headers' for admin_headers and taboo_headers
     upper case variable match names do not cause automatic bounces!
     (e.g. you MUST use access_rules to take any action)

-------------------------------------------------------------------------

When you use lower case variable match names, the default action when a
message matches an "admin_body" line is for the post to be sent to the list
owner (as a "consult" request) with a somewhat cryptic message that shows
the pattern which matched and the full text of the message. This will occur
if the sum of the scores is non-zero (positive or negative).

By using upper case variable match names, you can bypass the default
action so that a score is generated but no bounce occurs (the list owner
is not "consult"ed) unless you trap the variable with "access_rules".

The final score for a variable is the sum of all the "ss" values for all
of the "vv" variables which had matching rules. This gets a bit tricky,
because lines are checked one at a time. You can have several rules match
on the same line, but each rule can match only once per line. For example,
if a message contains ONLY these two lines:
  a b c
  c d d e f
then the admin_body pattern "/a/" will match once and increment "vv" by
the amount of "ss" just once. On the other hand, the pattern "/c/" will
increment "vv" twice since it matches a portion of two lines. Finally,
the pattern "/d/" will increment "vv" ONLY ONCE because it matches only
ONE LINE, regardless of how often the pattern appears on that line. The
key is how many lines match the pattern, where the pattern is taken as
a whole and the line is taken as a whole. The pattern "/[a-z] [a-z]/"
will increment "vv" twice (once per line) as will the pattern "/(c|d)/".   


With either upper or lower case variable match names, you can specify a
"replyfile" option to "access_rules" and send a very precise message back
to the poster whenever a match occurs. Depending on whether you specified
"admin_body" for the GLOBAL pseudo-list or an actual list, Majordomo will
make numeric variables available to access_rules using these names:
   \$global_admin_VV
   \$global_taboo_VV
   \$admin_VV
   \$taboo_VV
where the "VV" portion of each variable name is replaced by the string you
specified as the variable match name "vv". Below is an example.

If you do not specify "vv" in any of your commands, but you do specify all
four possible variations (admin_body, taboo_body, admin_headers, taboo_headers)
for some lists and for GLOBAL, then "access_rules" will only be able to test
these eight always-defined variables:
   \$global_admin_body
   \$global_taboo_body
   \$admin_body
   \$taboo_body
   \$global_admin_headers
   \$global_taboo_headers
   \$admin_headers
   \$taboo_headers

It is possible to specify "vv" of "body" or "headers", and then use the
always-defined variables in access_rules. This means you can actually
test the body but set admin_headers, etc. (It works, but it's poor form
because it's not self-documenting.)

If, on the other hand, you have
   configset listname admin_body <<ENDADMINBODY
   /subscribe/i
   /(nasty|dirty)/ 10,2,naughty
   /ugly/ 0,3,naughty
   ENDADMINBODY
then in addition to the variables above you would also be able to test
   \$admin_naughty
Below are some sample values...

In the example above, a message which contains the word "subscribe"
anywhere in the body, but none of "nasty", "dirty", or "ugly" will have
   \$admin_body == 10
   \$admin_naughty == 0
(note that if the word "subscribe" is used several times, ON SEPARATE
LINES, the \$admin_body score may be 20, 30, 40 ... it increments on
each line which matches, but not on extra matches within a line)

If the same message contains EITHER the word "nasty" OR the word
"dirty" before the 10th line will have
   \$admin_body == 10
   \$admin_naughty == 2

If the same message contains BOTH the word "nasty" AND the word
"dirty" before the 10th line will have
   \$admin_body == 10
   \$admin_naughty == 2
because the "nasty" and "dirty" matches are part of the same rule.
If you had TWO rules, "/dirty/ 10,2,naughty" and "/nasty/ 10,2,naughty"
then the \$admin_naughty score would be 4 in this case. Putting several
fields in a single pattern can not result in more than one match.

If a message contains both "nasty" and "ugly" in the first 10 lines
   \$admin_naughty == 5
because "ugly" is part of another rule but uses the same variable.

If a message contains both "nasty" and "ugly" on line 20
   \$admin_naughty == 3
because "ugly" is matched anywhere in the message but "nasty" is only
matched in the first 10 lines (as defined by the "nn" field of the rule).

To repeat, the variables generated for use by access_rules are all numeric,
containing a total score for all the message or header lines which matched
or '0' if no lines matched. Eight variables are always defined, but will
have zero values unless there are *_body or *_taboo rules that do not have
a specified variable match name.

-------------------------------------------------------------------------

Using taboo_body or admin_body to look for the "begin" tag of uuencoded
data may fail, if there is a content-type header, because may be is seen as
part of MIME encoding. In this case, the word "begin" will not appear in the
message body that Majordomo's core routines process. Please refer to
"help configset attachment_rules" for how to trap MIME attachments.

For uuencoded attachments, "begin 644" or something similar does appear in the
raw stream of bytes that traverse the network and show up in your mailbox file.
The MIME interface Majordomo uses is smart enough to decode an attachment with
Content-Transfer-Encoding: x-uuencode just like it will decode quoted-printable
or base64.  This is good because you can upload files even if your mailer insists
on doing the uuencode thing on its attachments, or if users try to bypass your
filters by doing the same thing. MIME-Tools is pretty smart; it will even try
to uncompress attachments if necessary so that your filters will work.

What you may find odd is that this only happens if the uuencoding is done as part
of a real MIME encapsulating, with Content-Type and Content-Transfer-Encoding and
the like.  You can of course uuencode something and paste the raw data right into
a message without any MIME stuff; _that_ will come through just as you see it and
your admin_body expression trapping 'begin xxx' will match.


See Also:
   help admin_moderate
   help configset_access_rules
   help configset_admin_headers
   help configset_block_headers (for how to block server commands)
   help configset_noarchive_body
   help configset_noarchive_headers
   help configset_taboo_body
   help configset_taboo_headers

$INCLUDE-help/foot
