= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
configset  GLOBAL  access_rules <<TAG
[VALUE LINES]
TAG
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
configset listname access_rules <<TAG
[VALUE LINES]
TAG
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Default Value : no default
Data Type     : access_rules
Variable Group: access
Password Notes: Visible only with password. 
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

EXAMPLE:
configset GLOBAL access_rules << ENDTAG
show,which,who
deny, replyfile=NoShowWhichWho
ALL

access
deny
/msn/i OR /hotbot/i
ENDTAG


A table containing access rules. Access to any command (such as "set"
or "subscribe" can be limited, and there are the two special cases
(see "help post" and "help access"). This is a very powerful and
unfortunately somewhat complicated mechanism for precisely restricting
access to Majordomo functions.

NOTE: Defining an access rule which refers to a sublist will CREATE
that sublist (or auxiliary list). See "help auxadd" for how to create
and/or put people on the sublist, see "help createlist" for regular lists.

There are a few shortcuts which can control access to common features,
which are easier to set up than access_rules but not as powerful. If
you configure an access_rule that acts on the same request as one of
the shortcuts, THE SHORTCUT COMMAND IS IGNORED! See the bottom of this
file for a list of these shortcuts (*_access and *_policy).

Note that restricting simplified file retrieval commands such as "faq"
(which send files to the user) does not automatically prevent using
"get" to retrieve the same files. You should establish separate access
rules for all of these commands: get, info, intro, faq, archive.

The "access_rules" variable can be set for individual lists as well as
for the GLOBAL pseudo-list. There are different requests that can be
trapped by each one.  If a command takes a list, it is restricted by
the list-specific access_rules. If it doesn't, the GLOBAL rules are used.

NOTE: Please refer to "help configset access_rules_variables" for
      details on which requests and variables are available!

WARNING: If you set access rules for the GLOBAL pseudo-list that attempt
to trap per-list commands, those rules will be silently ignored! This
includes things like "subscribe", which must be the target of a rule in
each list's configuration if you want to keep someone from subscribing.

This information is below:
  Section 1 - Working description of the access_rules config variable
          1.1 - First line - request
          1.2 - Second line - action
             1.2.1 - allow=N
             1.2.2 - confirm=file
             1.2.3 - confirm2=file1,file2,group,M
             1.2.4 - confirm_consult=file1,file2,group,M
             1.2.5 - consult=file,M,group,N
             1.2.6 - deny
             1.2.7 - forward=address
             1.2.8 - mailfile=file
             1.2.9 - reason
             1.2.10 - reply=message
             1.2.11 - replyfile=file
             1.2.12 - set
             1.2.13 - unset
          1.3 - Up to next blank line - code
          1.4 - Semantics
          1.5 - Moderator Groups
          1.6 - Supported variables
  Section 2 - Hints and suggestions for how and why to use access_rules
          2.1 - how to test access_rules quickly
          2.2 - why deny is much more drastic than consult or confirm
          2.3 - restricting non-subscriber posts
          2.4 - files and subjects for 'replyfile's or 'mailfile's
          2.5 - variables you can use in 'replyfile's or 'mailfile's
          2.6 - examples of useful access_rules, general hints
             2.6.1 - An alternative to admin_body or taboo_body, with specific reply
             2.6.2 - Provide a non-default reply for violations of admin_* and taboo_*
             2.6.3 - Inverted test (allow post ONLY if you find a specific string)
             2.6.4 - Moderate a known abuser so they can post only with owner approval
             2.6.5 - Reject all posts that have attachments
             2.6.6 - Allow a list owner to post without subscribing
             2.6.7 - Equivalent to moderate=yes
             2.6.8 - Ban some users from subscribing
             2.6.9 - Deny all access to off-site users
             2.6.10 - Remove confirmation requirement from 'set'
             2.6.11 - Prevent duplicate message checksums from being used
             2.6.12 - Change how many addresses "which" commands will return
             2.6.13 - Prevent posts on auxiliary lists (sublists)
          2.7 - improving the default "confirm" and "consult" files

There are some interactions between your choice of replyfile or mailfile
and the subscriber's setting of ack/noack (via the "set" or "configset
default_flags" commands). Error messages can vanish (for noack with
replyfile, unless ack_denials_always is enabled for the list in question)
or lacking information because variables are not always evaluated (for
mailfile). Refer to "help set" for more details.

In general mailfile is almost never the right thing to do since the
user will already be receiving an acknowledgement through either an
explicit ack message (for posts) or the regular command return. Using
mailfile can produce multiple messages for a single event, and mailfiles
cannot contain as much information as replyfiles (because some variables
are not evaluated).

If you put a pattern in access_rules, it is matched against the user's
address and nothing more.  If you want to match parts of the message
(or other parts of the header) use taboo_* or admin_*, since access_rules
does not get fed any part of the message.

All these access_rules can be bypassed with a password - this is
important for the list-owner and others who help with administrating
the mailing list. For details of how to do this please refer to
"help configset access_password_override".


+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +

Section 1 - Working description of the access_rules config variable:

Any command that doesn't take a list uses GLOBAL access_rules. Commands
that do take a list use the list's access_rules. There are two weird ones:

  which - for the GLOBAL pseudo-list, this allows or disallows use
          of "which" and sets the maximum number of hits (by default
          only one address will be returned without the site password).

  which - for a regular list, this overrides the GLOBAL defaults

  lists - GLOBAL check for 'lists', but each list is individually checked
          for the 'advertise' request.

1.1 - First line - request 
  This determines the request(s) that a rule applies to.

  Comma-separated list of server requests (or commands) including
  advertise, alias, post, subscribe, etc. For a complete list of
  commands, see "help topics". For a complete list of commands
  which are considered requests (on which access_rules can operate),
  see "help configset access_rules_variables".

  Note the special requests of "access" and "post", which
  are not technically commands but can be trapped as requests.


1.2 - Second line - action
  This determines the actions to be taken if the rule matches.

  Comma separated list of allow, confirm, confirm2, confirm_consult,
  consult, deny, forward, mailfile, reason, reply, replyfile, set, unset.

  If the action is reply, replyfile, or mailfile, the message or file
  can contain embedded variables which will be expanded before the
  message or file is sent. Otherwise, a default reply will be used
  depending on what the primary action is.

  The 'set' and 'unset' actions operate on the variables listed
  in "help configset access_rules_variables", so tests can be
  chained in order. The blank lines which separate rules do not
  reset variables.

1.2.1 - allow=N - the request succeeds.  If given an argument (allow=N) then N
    will be passed back to the calling routine (used in 'which' requests to
    limit the number of returned hits, and in 'who' to determine whether or
    not the user can see even hidden addresses).  If N is not given, it
    defaults to 1.  Be careful; this can render the 'which' command almost
    useless.

1.2.2 - confirm=file - a confirmation token is sent to the user who will be 
    affected by the request.  If given an argument (confirm=file), the given
    file will be used as the confirmation message.  If not, the standard
    file "confirm" is used.

1.2.3 - confirm2=file1,file2,group,M - a confirmation token is sent to BOTH
    users who will be affected by the request. This is the default access
    action only for changeaddr, but may also be used for other commands
    where requester (the address which sent the email or came from a
    "default user" command) and victim (the address given on the command
    line) may not match.
      * If requester and victim are the same, confirm with the victim.
      * If requester and victim are different, but the victim's password
        was supplied, confirm with the requester. The roles are swapped,
        so the confirmation message will say that the request was
        originated by the victim.
      * Otherwise, confirm with both, using a chained token, much
        like confirm_consult.  The victim receives the confirmation
        token before the requester.  If the victim accepts the token, the 
        roles are swapped when the token is sent to the requester.
    The following comma-separated arguments are taken:
      file1 - the file used for the first confirmation message (sent to
        the first person (the victim). If a file is not specified here
        the standard "confirm" file is used.
      file2 - the file used for the second confirmation message (sent to
        the requestor or the moderator. If a file is not specified here
        the standard "confirm" file is used again.
      M - the number of approvals that are required.  This permits a
        rudimentary form of group moderation (default 1).
      group - See 1.5 (Moderator Groups) below.

1.2.4 - confirm_consult=file1,file2,group,M - first confirms the action
    with the victim, then consults the list owner. Both tokens must be
    returned before the action which triggered the rule will take place.
    The following comma-separated arguments are taken:
      file1 - the file used for the confirmation message (sent to the
        victim. If a file is not specified here the standard "confirm"
        file is used.
      file2 - the file used for the consultation message (sent to the
        moderators. If a file is not specified here the standard "consult"
        file is used.
      M - the number of approvals that are required.  This permits a
        rudimentary form of group moderation (default 1).
      group - See 1.5 (Moderator Groups) below.

1.2.5 - consult=file,M,group,N - a token is sent to a moderator/group of
    moderators/randomly chosen subset of a group of moderators.  The token
    must be returned before the action which triggered the rule will take
    place. The following comma-separated arguments are taken:
      file - the file used for the consultation message (ignored if the
        request is post, and if a file is not specified here the standard
        file "consult" is used).
      M - the number of approvals that are required.  This permits a
        rudimentary form of group moderation (default 1).
      group - See 1.5 (Moderator Groups) below.
      N - the number of members of the moderator group to send to, chosen at
        random (defaults to all of the group).
     
1.2.6 - deny - disallows the action (with a default message unless reply,
    replyfile, or mailfile is also specified to customize the response)

1.2.7 - forward=address - forwards the command to another Majordomo server
    running at the specified address.

    The "forward" access rule action now works for 
    posted messages as well.  For example,
      post
      forward=someone@example.org
      ALL
    would cause each message to be sent to someone@example.org,
    and not posted to the main list.  At present, it
    is possible to combine "terminal" actions, so
      post
      forward=someone@example.org, default
      ALL
    would cause the message to be sent to someone and to
    the main list.  One interesting side-effect of the implementation 
    is that it possible to do strange things like this:
      subscribe
      consult,confirm,reason="Either the victim or the moderators must approve."
      ALL
    A confirm token would be sent to the victim, and a consult
    token would be sent to the moderators.  Either could approve
    the action.  If both approved, the last to do so would see an
    "already subscribed" error.

1.2.8 - mailfile=file - sends the contents of the given file back in a
    separate message (e.g. not with the command return).

1.2.9 - reason - allows additional information to be added to reply files
   for denied and stalled requests. Reason is similar to reply, but it is
   substituted for $REASONS in any reply file or reply that is used by the
   access rules. Each reason is appended to reasons that already exist,
   such as "Duplicate Message Checksum". All reasons will appear in the
   subject header of CONSULT messages to the list owners.  

1.2.10 - reply=message - sends a one-line message back as part of the command
    return.  Enclose the message in quotes to embed commas.  Multiple reply
    messages are concatenated with newlines.

1.2.11 - replyfile=file - sends the contents of the given file back as part
    of the command return.

1.2.12 - set - sets a variable to one.

1.2.13 - unset - sets a variable to zero, but does not delete it.


1.3 - Up to next blank line - code
  This is code in a simple language that is used to determine whether or
  not the action (line 2) should be taken.

  The following can be used in rules:

  Logical Connectives:
  AND, && - the conditions on both sides must be true
  OR, ||  - any one or both of the conditions must be true.
  NOT, !  - the following condition must be false
  
  Grouping:
  (, ) - enclose groups of conditions

  Username match:
  /expression/ - a Perl regular expression applied to the requesting user's
    address.

  Membership check:
  @, @MAIN - these are equivalent, and check to see that the user is a
    list subscriber.
  @auxlist - checks to see that the user is a member of the named auxiliary
    list. (see "help auxadd" and "help createlist" for how to create lists)

  Variable check:
  \$variable - checks to see that the supplied variable is true.
  \$variable=value - checks that the variable equals (stringwise)
     the given value.


1.4 - Semantics: 
  Rules for a particular request are processed in order; the _first_ rule
  that matches is taken.

  If no rules match, the "default" action is taken, which results in a
  reasonable emulation of the 1.94.3 behavior using *_access, moderate,
  restrict_post, etc. The default actions for all requests are listed
  in "help configset access_rules_variables".


1.5 - Moderator Groups:

        The access rules now support moderator groups for the "consult"
        and "conf_cons" actions. The addresses of a moderator group are
        expected to be stored in an auxiliary list. The default moderator
        group is called "moderators."  When a message is sent to the
        -moderator alias, the addresses in the "moderators" auxiliary list
        are the recipients, if that sublist exists. If not, the "moderators,"
        "moderator," and "sender" configuration settings are checked in
        turn until an address is found.

        If you use the "moderators" auxiliary list to store your moderators'
        addresses, it is possible to choose which of them will receive mail
        sent to the -moderator alias, using the "set-aux" command.

             the moderator group to send the confirmation request to
        (defaults to sending to moderator). The moderator group influences
        whether the second person to see the message is a list moderator
        or the requester.  If it is set to 'requester', the second person
        consulted is the requester; otherwise, the second person to be
        consulted is a list moderator.  Moderator groups are otherwise
        another unfinished idea.

        When mentioned above, the moderator group receives the consultation
        or confirmation request (defaults to sending to moderator). The
        moderator group influences whether the person to see the message
        is a list moderator or the requester.  If it is set to 'requester',
        the person consulted is the requester; otherwise, the list moderator
        is consulted. Moderator groups are otherwise another unfinished idea.

1.6 - Supported variables:
  All variables are now listed in "help variables"
  and/or "help configset access_rules_variables".


+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +

Section 2 - Hints and suggestions for how and why to use access_rules


2.1 - how to test access_rules quickly

  To test things out, try restricting the 'who' request in the same way
  as 'post', with access_rules, but leave out any 'mailfile' or 'replyfile'
  actions.  Then use the mj_shell command with the -u option to spoof a
  username for testing various addresses:
     mj_shell -u someone@example.com who listname

  Testing addresses with mj_shell is much easier and faster than using
  email to reach the command parser. Be careful, however, that you do
  not use REAL email addresses unless you check with the person first.
  It is possible to generate error messages or confirmation requests
  that will alarm the person actually at the email address you tested.

  If you see anomalous behavior, tack on the '-D' option when starting
  mj_shell and review the spew or save it to contact the author. The
  syntax of access_rules is complex but powerful. Be sure to test it.

  If you have parsing errors, remember to escape the "@" in addresses:
     post
     deny
     /joe\\@blow.com/

  If your rules don't match expected addresses, watch case sensitivity:
     post
     deny
     /nowhere.com/i

  See "help patterns" for more information on Perl regular expressions.


2.2 - why deny is much more drastic than consult or confirm

  deny    - post never shows up at all when expression matches
  consult - post goes to list owner for "accept" when expression matches
  confirm - post MAY go to message originator for "accept"

  The problem with "deny" is that neither the owner nor the person trying
  to post gets a notice. The post just evaporates since there isn't
  generally any kind of reply channel when doing a post. (Unlike when you
  send commands, where there is a message set up for the purpose of sending
  back the results of the commands.) There are additional actions that the
  "mailfile" and "replyfile" options can provide in some cases.

  If what you need is for the owner to review and approve the post, not for
  it to just vanish, use "consult". The "confirm" option is when the person
  making the post needs to be asked, while "consult" asks the list owner.

  In some cases, "confirm" cannot know who the originator was. In others,
  it will ask the "victim" for approval (like when you send from one
  account to subscribe a second account). It is possible, but not certain,
  that some confirmations will go the list owner or the site administrator
  (essentially the "consult" behavior but when "confirm" is used).

  Using deny with "set listname noack" and replyfile in access_rules can
  mean the user gets no message, the owner gets no message, and the list
  gets no post. Errors simply vanish in some cases. If you are using "deny",
  make sure to use "configset default_flags" or else use "set" to add
  "ackall" flags to each user's subscription. See "help who" for a
  technique to change user flags for the entire list.


2.3 - restricting non-subscriber posts

  Majordomo has its roots in an innocent time, when spam came in a can.
  Anyone can post to a Majordomo list, whether or not they are subscribed,
  by default. If you leave your list that way, the spammers may find out
  and bury you with unsolicited email (causing people to unsubscribe and/or
  complain to you).

  Previous versions of Majordomo (1.9x) used the restrict_post
  configuration variable to restrict posting to a mailing list.
  If you put the name of your list in it, only subscribers were
  allowed to post directly, and messages from other folks would
  be sent to the list-owner or moderators for approval.

  The Majordomo2 way to deal with it is to use access_rules:
     post
     consult, replyfile=NonSubscriberPost
     !@MAIN
  where the file "NonSubscriberPost" can be created under the GLOBAL
  pseudo-list (so it is available to all lists) with
     put GLOBAL /NonSubscriberPost
  (see "help put" for details).

  You (as the list owner) will then be consulted on all post requests sent
  by anyone whose address is not on the main list.  There are other things
  you can do, too; replace 'consult' with 'deny' and the list owner will
  never have a chance to allow non-subscriber posts even if they make sense
  (but will not be bothered with spammer posts at all).

  It is unquestionably better to "deny" non-subscribers than to "allow"
  subscribers. The deny method still filters posts through admin_body and
  taboo_body, whereas the allow method doesn't. See the example section
  below for more about "allow", and refer to "help configset admin_body"
  for details of admin_* and taboo_* settings.


2.4 - files and subjects for 'replyfile's or 'mailfile's

  Please refer to "help put" for message files that are used by default!

  Whether you are storing "access_rules" for the GLOBAL pseudo-list or an
  actual list, you should use the "put" command to create the file in the
  right place and with the right file ownership and access. Don't attempt
  to provide a full pathname in the operating system! The file pathname
  used by "access_rules" is scoped by the list the rule applies to (refer
  to "help put" for more information on file scoping and directories).

  Replyfile and mailfile also allow you to specify the subject
  of the message sent by the server. Refer to "help put" for the
  complete syntax of the put command, but here is an example that
  would supply the file "NonPost" used in the deny rule below:
     put GLOBAL /NonPost non-subscribers cannot post to \$LIST <<ENDNONPOST
     You must subscribe to \$LIST before you can send messages to it.
     NOTE: YOUR MESSAGE DID NOT GO TO THE LIST OR THE LIST OWNER.
           No one will see it unless you take further action!
     Your current header shows you are: \$VICTIM
     ENDNONPOST

  Don't put quotes around the subject, or they will show up in the
  email the poster receives. The final subject may be just the words
  you supply, or in some cases Majordomo will add other words. In a
  few cases, Majordomo will replace your subject with a stock one.
  Test all access_rules messages as soon as you create them!

  If you use a reply or replyfile of "NONE" no ack is sent.  This is a
  feature which will not be used often, but there are limited cases where
  you may actually want to send absolutely no message. For example, if you
  are having users confirm their own messages, you might want to suppress
  the ack.


2.5 - variables you can use in 'replyfile's or 'mailfile's

  If you want to replace Majordomo's error or explanatory message with
  one you write, use "replyfile" or "mailfile" options on access_rules.
  When composing the message, keep in mind that the person reading it
  may or may not remember what they did... so you need to give them as
  much information as possible in the message.

  Always create the error and get a copy of the message back before
  unleashing it on the list subscribers!

  Sometimes a pre-written message will be perfectly clear, but most
  of the time it will be MORE clear if you include the list name, the
  command, etc. Some people do not know what is in their mail headers,
  so it often helps (oddly enough) to tell them who you think they are!
  This type of information (list name, user name, command) can be put
  into the message using variables.

  There is a complete list of available variables in "help variables",
  which can be used to insert information into the replyfile or mailfile
  which is specific to a particular user or a particular message. Keep
  in mind that these variables can occur in both the subject and the
  message body.

  Refer to "help put" for how to store the files with subjects, but
  the general form is "put GLOBAL /file subject <<". The "subject"
  string on the "put" command will be the subject (or part of the
  subject) of the message sent by the server.

  See the next section for an example file using variables in both
  the subject line and the message itself.

  WARNING: In some cases replyfile works differently than mailfile. For
  example, trapping "configset taboo_header" violations and using
  access_rules to deny the post produces more fully evaluated variables
  with replyfile than with mailfile. On the other hand, replyfile can
  be skipped if the subscriber's flags are set to "noack", which is
  the Majordomo default unless "configset default_flags" changes it.
  When writing access_rules, test each one!


2.6 - general hints and examples of useful access_rules

  Note that first matching rule truncates the testing of other rules,
  and if an address matches a permissive rule first then restrictive
  rules which come later will not prevent the request (post, etc).

  An "allow" command will override almost everything! If you have
  administrivia enabled, and are using admin_body or taboo_body to
  trap server commands that are accidentally sent to the list, the
  "allow" command in access_rules will bypass the *_body traps for
  the listed address(es).

  Remember that "@MAIN" is a magic string that matches all list
  subscribers, while "!@MAIN" matches all non-subscribers. There
  are subtle differences between allowing subscribers to post and
  denying non-subscribers the right to post - see below for an example.

  Use replyfile, NOT mailfile, so poster gets back only ONE message
  when a confirmation message is sent. Using "mailfile" for non-
  subscriber posts, for example, will result in the poster getting
  one message that says the post is stalled and ANOTHER message
  asking for confirmation via accept. Replyfile is less confusing.


2.6.1 - An alternative to admin_body or taboo_body, with specific reply:
     post
     deny, replyfile=ThisThreadIsDead
     /string from thread/i
  which bounces the post *IF* it finds a matching phrase in the message.

  Note the trailing "i", which makes the match case insensitive. Without
  that, the upper and lower characters in the string are significant.


2.6.2 - Provide a non-default reply for violations of admin_* and taboo_*:
  The admin_body, taboo_body, admin_header, and taboo_header commands
  can trap posts and provide a default message. Using access_rules, you
  can customize the message without re-writing the rule.
     post
     deny, replyfile=SacredWordsUsed
     \$admin_body
  Please refer to "help configset admin_body" for a list of variable
  names which can be set when various patterns match. These are all
  numeric variables that can be tested with "<" and ">" or "==" to
  evaluate the "score" of a message against various rules.


2.6.3 - Inverted test (allow post ONLY if you find a specific string):
  It is possible to negate or invert the test with a leading "bang", so
  that any post WITHOUT the string will fail:
     post
     deny, replyfile=ThisPhraseRequired
     !/string you want to require/
  which bounces the post *UNLESS* it finds a matching phrase in the message.


2.6.4 - Moderate a known abuser so they can post only with owner approval:
     post
     consult, mailfile=BannedOrModerated
     /abuser\\@WHERE.com/i
  remember to escape the "@" and add "i" for case insensitivity!


2.6.5 - Reject all posts that have attachments:
     post
     deny, replyfile=NoAttachmentAllowed
     \$mime_deny
  Please refer to "help configset attachment_rules" for details.


2.6.6 - Allow a list owner to post without subscribing:
     configset MYLIST access_rules << ENDACCESSRULES
     post
     allow
     theowner\\@domain.org

     post
     deny, replyfile=NonPost
     !@MAIN
     ENDACCESSRULES

2.6.7 - Equivalent to moderate=yes:
post
consult
ALL


2.6.8 - Ban some users from subscribing:
subscribe
deny,reply="You are banned."
@banned


2.6.9 - Deny all access to off-site users:
access
deny
NOT /my.site.com/

or:

access
allow
/my.site.com/

access
deny
ALL


2.6.10 - Remove confirmation requirement from 'set':
set
allow
ALL

  You can also remove confirmation requirement from 'set' ONLY IF
  the 'From:' header (easily forged) matches the request:
set
confirm
$mismatch

set
allow
ALL


2.6.11 - Prevent duplicate message checksums from being used:
  This will turn off total and partial message checksumming
  off while leaving duplicate message ID checking on:
post
unset=dup_checksum, unset=dup_partial_checksum
ALL


2.6.12 - Change how many addresses "which" commands will return:
  The default is one match unless the site password is used, this
  will allow regular users to obtain up to 5 matches unless the
  "which" command is otherwise restricted by access_rules:
which
allow=5
ALL


2.6.13 - Prevent posts on auxiliary lists (sublists)
  To ban posts to all auxiliary lists, one would use the
  following access rule:
post
deny
$sublist=~/./



2.7 - improving the default "confirm" and "consult" files

  Majordomo has a default message for "confirm" (when the user is asked
  for an accept/reject token) and "consult" (when the list owner is asked),
  but these files may not contain enough information for the person being
  asked to make an intelligent choice. You can replace one or both files
  with whatever text you choose.

  Below are suggestions for these two files, formatted into the "put"
  commands you would send to Majordomo. Refer to "help put" for the
  full syntax of that command, but note that these two commands store
  files in the GLOBAL pseudo-list and supply a useful subject line to
  accompany the message text:

-------------

put GLOBAL /confirm CONFIRM from \$LIST - reply with accept or reject <<ENDCONFIRM
Dear email list subscriber - the server needs your advice!
(you may be the target of a spammer, so if you did not
send the request below, DO NOT IGNORE this message)

This request apparently came  from account: \$REQUESTER
This request apparently applies to account: \$VICTIM
If these lines don't match, you should probably change the command below!

The command you (or someone else) sent is on the following line:
  \$CMDLINE

If you didn't send the command above, contact \$OWNER right away!

If you want this action to be taken, please reply to this message
with the word "accept" (without quotes) on a line by itself.

If you do not wish to allow this request, you may reject it by replying to
this message with the word "reject" (without quotes) on a line by itself.

When you reply to this message it should go to "\$MJ".
You must keep the magic number in the subject line (do not edit the
reply subject). If you do not respond within \$EXPIRE days, this token
will expire (e.g. doing nothing is the same as rejecting, but slower).
If you do not respond within \$REMIND days, a reminder will be sent.

To contact the list owner, send email to \$OWNER

ENDCONFIRM

-------------

put GLOBAL /consult CONSULT from \$LIST - reply with accept or reject <<ENDCONSULT
Dear list owner - the server needs your advice!

This request apparently came  from account: \$REQUESTER
This request apparently applies to account: \$VICTIM
The request is on the following line:
  \$CMDLINE

If you want this action to be taken, please reply to this message
with the word "accept" (without quotes) on a line by itself.

If you do not wish to allow this request, you may reject it by replying to
this message with the word "reject" (without quotes) on a line by itself.

When you reply to this message it should go to "\$MJ".
You must keep the magic number in the subject line (do not edit the
reply subject). If you do not respond within \$EXPIRE days, this token
will expire (e.g. doing nothing is the same as rejecting, but slower).
If you do not respond within \$REMIND days, a reminder will be sent.

For a list of all outstanding requests, send this command to \$MJ
   approve ListPassword showtokens \$LIST

ENDCONSULT

-------------


See Also:
   help access    (for the special case of granting/denying all access)
   help auxadd    (for how to put addresses on sublists)
   help post      (for the special case of restricting who can post msgs)
   help variables (for a list of all possible variables and what they mean)
   help configset access_rules_variables (for requests, variables, defaults)
   help configset archive_access      (for     archive-related access_rules)
   help configset faq_access          (for         faq-related access_rules)
   help configset get_access          (for         get command access_rules)
   help configset index_access        (for       index command access_rules)
   help configset info_access         (for        info-related access_rules)
   help configset intro_access        (for       intro-related access_rules)
   help configset which_access        (for       which command access_rules)
   help configset who_access          (for         who command access_rules)
   help configset set_policy          (for         set command access_rules)
   help configset subscribe_policy    (for   subscribe command access_rules)
   help configset unsubscribe_policy  (for unsubscribe command access_rules)

For a list of all help topics send this one-line message
   help topics
to the server at $MJ
